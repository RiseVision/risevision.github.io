{
  "components": {
    "schemas": {
      "Buffer": {
        "id": "Buffer",
        "type": "string",
        "format": "binary"
      },
      "accounts.openAccount": {
        "id": "accounts.openAccount",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "secret"
        ]
      },
      "accounts.getBalance": {
        "id": "accounts.getBalance",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          }
        },
        "required": [
          "address"
        ]
      },
      "accounts.getPublickey": {
        "id": "accounts.getPublickey",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          }
        },
        "required": [
          "address"
        ]
      },
      "accounts.generatePublickey": {
        "id": "accounts.generatePublickey",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "secret"
        ]
      },
      "accounts.getDelegates": {
        "id": "accounts.getDelegates",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          }
        },
        "required": [
          "address"
        ]
      },
      "accounts.getDelegatesFee": {
        "id": "accounts.getDelegatesFee",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "accounts.addDelegates": {
        "id": "accounts.addDelegates",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "secondSecret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        }
      },
      "accounts.getAccount": {
        "id": "accounts.getAccount",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        }
      },
      "accounts.top": {
        "id": "accounts.top",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "blocks.loadBlocksFromPeer": {
        "id": "blocks.loadBlocksFromPeer",
        "type": "array"
      },
      "blocks.getBlock": {
        "id": "blocks.getBlock",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "id"
        ]
      },
      "blocks.getBlocks": {
        "id": "blocks.getBlocks",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "height:asc",
              "height:desc"
            ]
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "generatorPublicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "totalAmount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "totalFee": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "reward": {
            "type": "integer",
            "minimum": 0
          },
          "previousBlock": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "blocks.getFees": {
        "id": "blocks.getFees",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "blocks.getFee": {
        "id": "blocks.getFee",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "blocks.getStatus": {
        "id": "blocks.getStatus",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "blocks.getCommonBlock": {
        "id": "blocks.getCommonBlock",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "previousBlock": {
            "anyOf": [
              {
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ]
          },
          "height": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "id",
          "previousBlock",
          "height"
        ]
      },
      "appCon": {
        "id": "appCon",
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "address": {
            "type": "string",
            "format": "ip"
          },
          "version": {
            "type": "string",
            "format": "version",
            "minLength": 5,
            "maxLength": 12
          },
          "fileLogLevel": {
            "type": "string"
          },
          "logFileName": {
            "type": "string"
          },
          "consoleLogLevel": {
            "type": "string"
          },
          "trustProxy": {
            "type": "boolean"
          },
          "cacheEnabled": {
            "type": "boolean"
          },
          "db": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string"
              },
              "port": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "database": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "poolSize": {
                "type": "integer"
              },
              "poolIdleTimeout": {
                "type": "integer"
              },
              "reapIntervalMillis": {
                "type": "integer"
              },
              "logEvents": {
                "type": "array"
              }
            },
            "required": [
              "host",
              "port",
              "database",
              "user",
              "password",
              "poolSize",
              "poolIdleTimeout",
              "reapIntervalMillis",
              "logEvents"
            ]
          },
          "redis": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "format": "ip"
              },
              "port": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "db": {
                "type": "integer",
                "minimum": 0,
                "maximum": 15
              },
              "password": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "required": [
              "host",
              "port",
              "db",
              "password"
            ]
          },
          "api": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "access": {
                "type": "object",
                "properties": {
                  "public": {
                    "type": "boolean"
                  },
                  "whiteList": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "public",
                  "whiteList"
                ]
              },
              "restrictedWhiteList": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "options": {
                "type": "object",
                "properties": {
                  "limits": {
                    "type": "object",
                    "properties": {
                      "max": {
                        "type": "integer"
                      },
                      "delayMs": {
                        "type": "integer"
                      },
                      "delayAfter": {
                        "type": "integer"
                      },
                      "windowMs": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "max",
                      "delayMs",
                      "delayAfter",
                      "windowMs"
                    ]
                  }
                },
                "required": [
                  "limits"
                ]
              }
            },
            "required": [
              "enabled",
              "access",
              "options",
              "restrictedWhiteList"
            ]
          },
          "peers": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "banTime": {
                "type": "integer",
                "minimum": 1000
              },
              "list": {
                "type": "array"
              },
              "access": {
                "type": "object",
                "properties": {
                  "blackList": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "blackList"
                ]
              },
              "options": {
                "properties": {
                  "limits": {
                    "type": "object",
                    "properties": {
                      "max": {
                        "type": "integer"
                      },
                      "delayMs": {
                        "type": "integer"
                      },
                      "delayAfter": {
                        "type": "integer"
                      },
                      "windowMs": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "max",
                      "delayMs",
                      "delayAfter",
                      "windowMs"
                    ]
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "limits",
                  "timeout"
                ]
              }
            },
            "required": [
              "enabled",
              "list",
              "access",
              "options"
            ]
          },
          "broadcasts": {
            "type": "object",
            "properties": {
              "broadcastInterval": {
                "type": "integer",
                "minimum": 1000,
                "maximum": 60000
              },
              "broadcastLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "parallelLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "releaseLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 25
              },
              "relayLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              }
            },
            "required": [
              "broadcastInterval",
              "broadcastLimit",
              "parallelLimit",
              "releaseLimit",
              "relayLimit"
            ]
          },
          "transactions": {
            "type": "object",
            "maxTxsPerQueue": {
              "type": "integer",
              "minimum": 100,
              "maximum": 5000
            },
            "required": [
              "maxTxsPerQueue"
            ]
          },
          "forging": {
            "type": "object",
            "properties": {
              "force": {
                "type": "boolean"
              },
              "secret": {
                "type": "array"
              },
              "access": {
                "type": "object",
                "properties": {
                  "whiteList": {
                    "type": "array"
                  }
                },
                "required": [
                  "whiteList"
                ]
              },
              "transactionsPolling": {
                "type": "boolean"
              },
              "pollingInterval": {
                "type": "number"
              }
            },
            "required": [
              "force",
              "secret",
              "access"
            ]
          },
          "loading": {
            "type": "object",
            "properties": {
              "verifyOnLoading": {
                "type": "boolean"
              },
              "loadPerIteration": {
                "type": "integer",
                "minimum": 1,
                "maximum": 5000
              }
            },
            "required": [
              "verifyOnLoading",
              "loadPerIteration"
            ]
          },
          "ssl": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "options": {
                "type": "object",
                "properties": {
                  "port": {
                    "type": "integer"
                  },
                  "address": {
                    "type": "string",
                    "format": "ip"
                  },
                  "key": {
                    "type": "string"
                  },
                  "cert": {
                    "type": "string"
                  }
                },
                "required": [
                  "port",
                  "address",
                  "key",
                  "cert"
                ]
              }
            },
            "required": [
              "enabled",
              "options"
            ]
          },
          "nethash": {
            "type": "string",
            "format": "hex"
          }
        },
        "required": [
          "port",
          "address",
          "version",
          "fileLogLevel",
          "logFileName",
          "consoleLogLevel",
          "trustProxy",
          "db",
          "api",
          "peers",
          "broadcasts",
          "transactions",
          "forging",
          "loading",
          "nethash",
          "cacheEnabled",
          "redis"
        ]
      },
      "delegates.enableForging": {
        "id": "delegates.enableForging",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "secret"
        ]
      },
      "delegates.disableForging": {
        "id": "delegates.disableForging",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "secret"
        ]
      },
      "delegates.forgingStatus": {
        "id": "delegates.forgingStatus",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        }
      },
      "delegates.getDelegate": {
        "id": "delegates.getDelegate",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "username": {
            "type": "string",
            "format": "username",
            "minLength": 1,
            "maxLength": 20
          }
        }
      },
      "delegates.search": {
        "id": "delegates.search",
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        },
        "required": [
          "q"
        ]
      },
      "delegates.getVoters": {
        "id": "delegates.getVoters",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "publicKey"
        ]
      },
      "delegates.getDelegates": {
        "id": "delegates.getDelegates",
        "type": "object",
        "properties": {
          "orderBy": {
            "type": "string",
            "enum": [
              "approval:desc",
              "approval:asc",
              "productivity:desc",
              "productivity:asc",
              "rank:desc",
              "rank:asc",
              "vote:desc",
              "vote:asc",
              "votesWeight:desc",
              "votesWeight:asc",
              "address:desc",
              "address:asc",
              "username:desc",
              "username:asc",
              "publicKey:desc",
              "publicKey:asc"
            ]
          },
          "includeBanned": {
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 199
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "delegates.getFee": {
        "id": "delegates.getFee",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "delegates.getForgedByAccount": {
        "id": "delegates.getForgedByAccount",
        "type": "object",
        "properties": {
          "generatorPublicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "start": {
            "type": "integer"
          },
          "end": {
            "type": "integer"
          }
        },
        "required": [
          "generatorPublicKey"
        ]
      },
      "delegates.addDelegate": {
        "id": "delegates.addDelegate",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "secondSecret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "username": {
            "type": "string",
            "format": "username",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "secret"
        ]
      },
      "loader.loadSignatures": {
        "id": "loader.loadSignatures",
        "type": "object",
        "properties": {
          "signatures": {
            "type": "array",
            "uniqueItems": true,
            "maxItems": 100
          }
        },
        "required": [
          "signatures"
        ]
      },
      "loader.loadTransactions": {
        "id": "loader.loadTransactions",
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "uniqueItems": true,
            "maxItems": 100
          }
        },
        "required": [
          "transactions"
        ]
      },
      "multisignatures.getAccounts": {
        "id": "multisignatures.getAccounts",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "publicKey"
        ]
      },
      "multisignatures.pending": {
        "id": "multisignatures.pending",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "publicKey"
        ]
      },
      "multisignatures.sign": {
        "id": "multisignatures.sign",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "secondSecret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "transactionId": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "transactionId",
          "secret"
        ]
      },
      "multisignatures.addMultisignature": {
        "id": "multisignatures.addMultisignature",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "secondSecret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "min": {
            "type": "integer",
            "minimum": 1,
            "maximum": 15
          },
          "lifetime": {
            "type": "integer",
            "minimum": 1,
            "maximum": 72
          },
          "keysgroup": {
            "type": "array",
            "minItems": 1,
            "maxItems": 15
          }
        },
        "required": [
          "min",
          "lifetime",
          "keysgroup",
          "secret"
        ]
      },
      "peer.getPeers": {
        "id": "peer.getPeers",
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "state": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2
          },
          "os": {
            "type": "string",
            "format": "os",
            "minLength": 1,
            "maxLength": 64
          },
          "version": {
            "type": "string",
            "format": "version",
            "minLength": 5,
            "maxLength": 12
          },
          "broadhash": {
            "type": "string",
            "format": "hex"
          },
          "height": {
            "type": "integer",
            "minimum": 1
          },
          "orderBy": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "peer.getPeer": {
        "id": "peer.getPeer",
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          }
        },
        "required": [
          "ip",
          "port"
        ]
      },
      "peer.getMinVersion": {
        "id": "peer.getMinVersion",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "signatures.getFee": {
        "id": "signatures.getFee",
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "transactions.getTransactions": {
        "id": "transactions.getTransactions",
        "type": "object",
        "properties": {
          "and:blockId": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "blockId": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "and:type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10
          },
          "type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10
          },
          "and:senderId": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "senderId": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "and:senderPublicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "senderPublicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "and:recipientId": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "recipientId": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "senderPublicKeys": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "publicKey"
            }
          },
          "senderIds": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "address",
              "minLength": 1,
              "maxLength": 22
            }
          },
          "recipientIds": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "address",
              "minLength": 1,
              "maxLength": 22
            }
          },
          "and:fromHeight": {
            "type": "integer",
            "minimum": 1
          },
          "fromHeight": {
            "type": "integer",
            "minimum": 1
          },
          "and:toHeight": {
            "type": "integer",
            "minimum": 1
          },
          "toHeight": {
            "type": "integer",
            "minimum": 1
          },
          "and:fromTimestamp": {
            "type": "integer",
            "minimum": 0
          },
          "fromTimestamp": {
            "type": "integer",
            "minimum": 0
          },
          "and:toTimestamp": {
            "type": "integer",
            "minimum": 1
          },
          "toTimestamp": {
            "type": "integer",
            "minimum": 1
          },
          "and:fromUnixTime": {
            "type": "integer",
            "minimum": 1464109200
          },
          "fromUnixTime": {
            "type": "integer",
            "minimum": 1464109200
          },
          "and:toUnixTime": {
            "type": "integer",
            "minimum": 1464109201
          },
          "toUnixTime": {
            "type": "integer",
            "minimum": 1464109201
          },
          "and:minAmount": {
            "type": "integer",
            "minimum": 0
          },
          "minAmount": {
            "type": "integer",
            "minimum": 0
          },
          "and:maxAmount": {
            "type": "integer",
            "minimum": 1
          },
          "maxAmount": {
            "type": "integer",
            "minimum": 1
          },
          "and:minConfirmations": {
            "type": "integer",
            "minimum": 0
          },
          "minConfirmations": {
            "type": "integer",
            "minimum": 0
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "height:desc",
              "height:asc",
              "timestamp:desc",
              "timestamp:asc",
              "amount:desc",
              "amount:asc"
            ]
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "transactions.getTransaction": {
        "id": "transactions.getTransaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "id"
        ]
      },
      "transactions.getPooledTransaction": {
        "id": "transactions.getPooledTransaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "id"
        ]
      },
      "transactions.getPooledTransactions": {
        "id": "transactions.getPooledTransactions",
        "type": "object",
        "properties": {
          "senderPublicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "address": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          }
        }
      },
      "transactions.addTransactions": {
        "id": "transactions.addTransactions",
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "amount": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10999999991000000
          },
          "recipientId": {
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "publicKey": {
            "type": "string",
            "format": "publicKey"
          },
          "secondSecret": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "multisigAccountPublicKey": {
            "type": "string",
            "format": "publicKey"
          }
        },
        "required": [
          "secret",
          "amount",
          "recipientId"
        ]
      },
      "transactions.put": {
        "id": "transactions.put",
        "type": "object",
        "properties": {
          "transaction": {
            "type": "object"
          },
          "transactions": {
            "type": "array",
            "maxItems": 10
          }
        }
      },
      "transport.headers": {
        "id": "transport.headers",
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "os": {
            "type": "string",
            "format": "os",
            "minLength": 1,
            "maxLength": 64
          },
          "version": {
            "type": "string",
            "format": "version",
            "minLength": 5,
            "maxLength": 12
          },
          "nethash": {
            "type": "string",
            "minLength": 64,
            "maxLength": 64
          },
          "broadhash": {
            "type": "string",
            "format": "hex"
          },
          "height": {
            "type": "integer",
            "minimum": 1
          },
          "nonce": {
            "type": "string",
            "minLength": 16,
            "maxLength": 36
          },
          "firewalled": {
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          }
        },
        "required": [
          "port",
          "version",
          "nethash"
        ]
      },
      "transport.commonBlock": {
        "id": "transport.commonBlock",
        "type": "object",
        "properties": {
          "ids": {
            "type": "string",
            "format": "csv"
          }
        },
        "required": [
          "ids"
        ]
      },
      "transport.blocks": {
        "id": "transport.blocks",
        "type": "object",
        "properties": {
          "lastBlockId": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        }
      },
      "transport.transactions": {
        "id": "transport.transactions",
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 25
          }
        },
        "required": [
          "transactions"
        ]
      },
      "transport.signatures": {
        "id": "transport.signatures",
        "type": "object",
        "properties": {
          "signatures": {
            "type": "array",
            "minItems": 1,
            "maxItems": 25
          }
        },
        "required": [
          "signatures"
        ]
      },
      "transport.signature": {
        "id": "transport.signature",
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "signature": {
            "type": "string",
            "format": "signature"
          }
        },
        "required": [
          "transaction",
          "signature"
        ]
      },
      "1359353064084280533": {
        "id": "1359353064084280533",
        "rowId": 1356766,
        "version": 0,
        "timestamp": 74366340,
        "height": 1356391,
        "previousBlock": "6501365850122980670",
        "numberOfTransactions": 1,
        "totalAmount": 155090000000,
        "totalFee": 10000000,
        "reward": 1200000000,
        "payloadLength": 117,
        "payloadHash": "8f20883b18d72a47ee3a6dafdbc6d3e398b5e51f7f2d717c33975fd4ad945a34",
        "generatorPublicKey": "c3bf0d2e95d2eb2479ee338915d72430a114c509c453ef21d8a07d6b9a564c19",
        "blockSignature": "8d05f09d9a25a03d6234e36b20ba08467618eab4b2df9c3453606964ba7a030c22044f2fa6018892230a1cc8a04e5d73f122fc770d0629884e5ba6de00a05507",
        "transactions": [
          {
            "signatures": [],
            "id": "5128147624792694927",
            "rowId": 560070,
            "height": 1355968,
            "blockId": "1359353064084280533",
            "type": 0,
            "timestamp": 74366321,
            "senderPublicKey": "7605b8b4baa61efbf493a5e2c783e701226a2200c45bc28ebea8f52ab4ce3188",
            "senderId": "1887676714119818627R",
            "recipientId": "5920507067941756798R",
            "amount": 155090000000,
            "fee": 10000000,
            "signature": "d8c4c0ac3c45781922865dcec37362d2785bbc89bb8e6d0b219e6755c7d72f78beea0fccb6b15442772623d973c722f6cd64d9ad63e896f36688e9bb13f87505",
            "signSignature": null,
            "requesterPublicKey": null,
            "asset": null,
            "confirmations": 29
          }
        ]
      },
      "6501365850122980670": {
        "id": "6501365850122980670",
        "rowId": 1356765,
        "version": 0,
        "timestamp": 74379510,
        "height": 1356390,
        "previousBlock": "14921645259042587857",
        "numberOfTransactions": 0,
        "totalAmount": 0,
        "totalFee": 0,
        "reward": 1200000000,
        "payloadLength": 0,
        "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "generatorPublicKey": "16d725d3430beb17638397f48c66f035ed25ddcc02220ab3d311b6a0a3d8f349",
        "blockSignature": "7197567651282ae370066d953d3aa1a5ef99965ca504115ca690e651888d1bb19e10fab0ae95982013143e9c636114a86be7abbdae255e188113d13393ef460a",
        "transactions": []
      },
      "14921645259042587857": {
        "id": "14921645259042587857",
        "rowId": 1356764,
        "version": 0,
        "timestamp": 74379480,
        "height": 1356389,
        "previousBlock": "11101205285804076839",
        "numberOfTransactions": 0,
        "totalAmount": 0,
        "totalFee": 0,
        "reward": 1200000000,
        "payloadLength": 0,
        "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "generatorPublicKey": "696a15b1e89a1e9b22858500d982095f4bfbf315b337f6181a6f278602340577",
        "blockSignature": "466ab9de1d95469d2da02ed4fcbc15d2560f512b82b478b7d29e2a00b65dbac5b6df6cab7f02c65affa3d933a1c95e0f7c3f43d9999b5682b355ed57fac7fa09",
        "transactions": []
      },
      "6920969059388666996": {
        "signatures": [],
        "id": "6920969059388666996",
        "type": 0,
        "timestamp": 54069408,
        "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
        "senderId": "1644223775232371040R",
        "recipientId": "3303015780877366956R",
        "amount": 199533766861,
        "fee": 10000000,
        "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
        "signSignature": null,
        "requesterPublicKey": null,
        "rowId": 230339,
        "asset": null,
        "height": 694239,
        "blockId": "14986452887816815162",
        "confirmations": 670383
      },
      "6059220831601703385": {
        "signatures": [],
        "id": "6059220831601703385",
        "type": 1,
        "timestamp": 54027458,
        "senderPublicKey": "5cc3326c126e56d0f54aa61bfe6d98071c49983505e49e176f017ada1a777c57",
        "senderId": "14470084663212135040R",
        "recipientId": null,
        "amount": 0,
        "fee": 500000000,
        "signature": "c2e81420ee4d0ad3f2cc78e16375cbd6720dc225d5987c2d1467a69193b45b85d371a515313253ecd58216abdce14a462dd9fcecd43a129787b07b958cf99301",
        "signSignature": null,
        "requesterPublicKey": null,
        "rowId": 229412,
        "asset": {
          "signature": {
            "publicKey": "7a1e8d2721b55ac7e8c2c0a51e297d8caee2b0fd07d72f1389aec9977023f83f"
          }
        },
        "height": 692846,
        "blockId": "11971020380225057286",
        "confirmations": 671776
      },
      "1433374155612627632": {
        "signatures": [],
        "id": "1433374155612627632",
        "type": 2,
        "timestamp": 53952216,
        "senderPublicKey": "a39343f6343f72d08811e2c11c6137ae4246bc6446d199883d1a6668eb62b9dd",
        "senderId": "11334711468380890209R",
        "recipientId": null,
        "amount": 0,
        "fee": 2500000000,
        "signature": "f5fb637d6152af237aa8174c61ef59eadb315c716aafe1f916f347b4b3c8e2a64ac2517c74a8691af0f3cc79b6921f5cd7ae5865766b3e031306f755c053fd00",
        "signSignature": null,
        "requesterPublicKey": null,
        "rowId": 227998,
        "asset": {
          "delegate": {
            "username": "mbkz"
          }
        },
        "height": 690355,
        "blockId": "1002473113321949051",
        "confirmations": 674267
      },
      "8427347107286041778": {
        "signatures": [],
        "id": "8427347107286041778",
        "type": 3,
        "timestamp": 54068843,
        "senderPublicKey": "72822092a16ce58afea8e76ff609832401695b5d32da2c488c7f9272626be02f",
        "senderId": "7638830122069556640R",
        "recipientId": "7638830122069556640R",
        "amount": 0,
        "fee": 100000000,
        "signature": "a96d28826480e8b5be80ebaf8ba64124a5ecb9201325c5054be7af5ff5ccaca49cbf9f51a89070e6cf4e9b54845ce0f301b1738e44e91f7dd62d7f7c6911e705",
        "signSignature": null,
        "requesterPublicKey": null,
        "rowId": 230295,
        "asset": {
          "votes": [
            "+7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
          ]
        },
        "height": 694221,
        "blockId": "5564349571033117319",
        "confirmations": 670401
      },
      "2800934512471301755": {
        "signatures": [
          "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
          "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
        ],
        "id": "2800934512471301755",
        "type": 4,
        "timestamp": 37507653,
        "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
        "senderId": "12109113090353923093R",
        "recipientId": "2688837343357225875R",
        "amount": 50000000000,
        "fee": 500000000,
        "signature": null,
        "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
        "requesterPublicKey": null,
        "rowId": 5273,
        "asset": {
          "multisignature": {
            "min": 2,
            "lifetime": 12,
            "keysgroup": [
              "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
              "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
            ]
          }
        },
        "height": 149100,
        "blockId": "1416515249237234263",
        "confirmations": 1215659
      },
      "common.scalars.height": {
        "id": "common.scalars.height",
        "type": "integer",
        "minimum": 1
      },
      "common.models.UnconfirmedTransaction": {
        "id": "common.models.UnconfirmedTransaction",
        "type": "object",
        "properties": {
          "amount": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 7
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "id": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "recipientId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "requesterPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "rowId": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "senderId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "senderPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "signSignature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signatures": {
            "type": "array",
            "items": {
              "id": "common.scalars.signature",
              "type": "string",
              "format": "signatureBuf"
            }
          },
          "timestamp": {
            "id": "common.scalars.timestamp",
            "type": "integer",
            "minimum": 1
          },
          "asset": {
            "type": "object",
            "properties": {
              "multisignature": {
                "type": "object",
                "properties": {
                  "min": {
                    "id": "common.scalars.multisigMin",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15
                  },
                  "lifetime": {
                    "id": "common.scalars.multisigLifetime",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 72
                  },
                  "keysgroup": {
                    "id": "common.scalars.multisigKeysgroup",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 15,
                    "items": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    }
                  }
                }
              },
              "signature": {
                "type": "object",
                "properties": {
                  "publicKey": {
                    "id": "common.scalars.publicKey",
                    "type": "string",
                    "format": "publicKey"
                  }
                }
              },
              "votes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^[-+]{1}[0-9a-z]{64}$"
                }
              },
              "delegate": {
                "type": "object",
                "properties": {
                  "username": {
                    "id": "common.scalars.username",
                    "type": "string",
                    "format": "username",
                    "minLength": 1,
                    "maxLength": 20
                  }
                }
              }
            }
          }
        }
      },
      "common.models.Transaction": {
        "id": "common.models.Transaction",
        "type": "object",
        "properties": {
          "amount": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 7
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "id": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "recipientId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "requesterPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "rowId": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "senderId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "senderPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "signSignature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signatures": {
            "type": "array",
            "items": {
              "id": "common.scalars.signature",
              "type": "string",
              "format": "signatureBuf"
            }
          },
          "timestamp": {
            "id": "common.scalars.timestamp",
            "type": "integer",
            "minimum": 1
          },
          "asset": {
            "type": "object",
            "properties": {
              "multisignature": {
                "type": "object",
                "properties": {
                  "min": {
                    "id": "common.scalars.multisigMin",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15
                  },
                  "lifetime": {
                    "id": "common.scalars.multisigLifetime",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 72
                  },
                  "keysgroup": {
                    "id": "common.scalars.multisigKeysgroup",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 15,
                    "items": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    }
                  }
                }
              },
              "signature": {
                "type": "object",
                "properties": {
                  "publicKey": {
                    "id": "common.scalars.publicKey",
                    "type": "string",
                    "format": "publicKey"
                  }
                }
              },
              "votes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^[-+]{1}[0-9a-z]{64}$"
                }
              },
              "delegate": {
                "type": "object",
                "properties": {
                  "username": {
                    "id": "common.scalars.username",
                    "type": "string",
                    "format": "username",
                    "minLength": 1,
                    "maxLength": 20
                  }
                }
              }
            }
          },
          "blockId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "confirmations": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "common.models.MultisigTransaction": {
        "id": "common.models.MultisigTransaction",
        "type": "object",
        "properties": {
          "amount": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 7
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "id": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "recipientId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "requesterPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "rowId": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "senderId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "senderPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "signSignature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signature": {
            "id": "common.scalars.signature",
            "type": "string",
            "format": "signatureBuf"
          },
          "signatures": {
            "type": "array",
            "items": {
              "id": "common.scalars.signature",
              "type": "string",
              "format": "signatureBuf"
            }
          },
          "timestamp": {
            "id": "common.scalars.timestamp",
            "type": "integer",
            "minimum": 1
          },
          "asset": {
            "type": "object",
            "properties": {
              "multisignature": {
                "type": "object",
                "properties": {
                  "min": {
                    "id": "common.scalars.multisigMin",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15
                  },
                  "lifetime": {
                    "id": "common.scalars.multisigLifetime",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 72
                  },
                  "keysgroup": {
                    "id": "common.scalars.multisigKeysgroup",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 15,
                    "items": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    }
                  }
                }
              }
            }
          },
          "blockId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "confirmations": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "common.models.Block": {
        "id": "common.models.Block",
        "type": "object",
        "properties": {
          "blockSignature": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "generatorPublicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "id": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "numberOfTransactions": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "payloadHash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "payloadLength": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "previousBlock": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          },
          "reward": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "rowId": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "timestamp": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "totalAmount": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "totalFee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "Transactions": {
            "type": "array",
            "items": {
              "id": "common.models.Transaction",
              "type": "object",
              "properties": {
                "amount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "type": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "fee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "recipientId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "requesterPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "senderId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "senderPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "signSignature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "timestamp": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "multisignature": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "id": "common.scalars.multisigMin",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "lifetime": {
                          "id": "common.scalars.multisigLifetime",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 72
                        },
                        "keysgroup": {
                          "id": "common.scalars.multisigKeysgroup",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 15,
                          "items": {
                            "id": "common.scalars.publicKey",
                            "type": "string",
                            "format": "publicKey"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    },
                    "votes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[-+]{1}[0-9a-z]{64}$"
                      }
                    },
                    "delegate": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "id": "common.scalars.username",
                          "type": "string",
                          "format": "username",
                          "minLength": 1,
                          "maxLength": 20
                        }
                      }
                    }
                  }
                },
                "blockId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "confirmations": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "height": {
                  "id": "common.scalars.height",
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          "version": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "common.models.Delegate": {
        "id": "common.models.Delegate",
        "type": "object",
        "properties": {
          "address": {
            "id": "common.scalars.address",
            "type": "string",
            "format": "address",
            "minLength": 1,
            "maxLength": 22
          },
          "approval": {
            "type": "number",
            "format": "float"
          },
          "missedblocks": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "producedBlocks": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "productivity": {
            "type": "number",
            "format": "float"
          },
          "publicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "rank": {
            "id": "common.scalars.countingNum",
            "type": "integer",
            "minimum": 1
          },
          "rate": {
            "id": "common.scalars.countingNum",
            "type": "integer",
            "minimum": 1
          },
          "username": {
            "id": "common.scalars.username",
            "type": "string",
            "format": "username",
            "minLength": 1,
            "maxLength": 20
          },
          "vote": {
            "id": "common.scalars.stringnum",
            "type": "string",
            "format": "stringnum"
          }
        }
      },
      "common.models.Peer": {
        "id": "common.models.Peer",
        "type": "object",
        "properties": {
          "ip": {
            "id": "common.scalars.ipAddress",
            "type": "string",
            "format": "ip"
          },
          "port": {
            "id": "common.scalars.port",
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "state": {
            "id": "common.scalars.osState",
            "type": "integer",
            "minimum": 0,
            "maximum": 2
          },
          "os": {
            "id": "common.scalars.os",
            "type": "string",
            "format": "os",
            "minLength": 1,
            "maxLength": 64
          },
          "version": {
            "id": "common.scalars.version",
            "type": "string",
            "format": "version",
            "minLength": 5,
            "maxLength": 12
          },
          "broadhash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "clock": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "updated": {
            "id": "common.scalars.timestamp",
            "type": "integer",
            "minimum": 1
          },
          "nonce": "d845b08b-7824-45f3-9033-5317622d0d2f"
        }
      },
      "common.scalars.CSV": {
        "id": "common.scalars.CSV",
        "type": "string",
        "format": "csv"
      },
      "common.scalars.id": {
        "id": "common.scalars.id",
        "type": "string",
        "format": "id",
        "minLength": 1,
        "maxLength": 20
      },
      "common.scalars.secret": {
        "id": "common.scalars.secret",
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "common.scalars.address": {
        "id": "common.scalars.address",
        "type": "string",
        "format": "address",
        "minLength": 1,
        "maxLength": 22
      },
      "common.scalars.publicKey": {
        "id": "common.scalars.publicKey",
        "type": "string",
        "format": "publicKey"
      },
      "common.scalars.amount": {
        "id": "common.scalars.amount",
        "type": "integer",
        "minimum": 0,
        "maximum": 10999999991000000
      },
      "common.scalars.reward": {
        "id": "common.scalars.reward",
        "type": "integer",
        "minimum": 0
      },
      "common.scalars.username": {
        "id": "common.scalars.username",
        "type": "string",
        "format": "username",
        "minLength": 1,
        "maxLength": 20
      },
      "common.scalars.query": {
        "id": "common.scalars.query",
        "type": "string",
        "minLength": 1,
        "maxLength": 20
      },
      "common.scalars.multisigMin": {
        "id": "common.scalars.multisigMin",
        "type": "integer",
        "minimum": 1,
        "maximum": 15
      },
      "common.scalars.multisigLifetime": {
        "id": "common.scalars.multisigLifetime",
        "type": "integer",
        "minimum": 1,
        "maximum": 72
      },
      "common.scalars.multisigKeysgroup": {
        "id": "common.scalars.multisigKeysgroup",
        "type": "array",
        "minItems": 1,
        "maxItems": 15,
        "items": {
          "id": "common.scalars.publicKey",
          "type": "string",
          "format": "publicKey"
        }
      },
      "common.scalars.port": {
        "id": "common.scalars.port",
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "common.scalars.ipAddress": {
        "id": "common.scalars.ipAddress",
        "type": "string",
        "format": "ip"
      },
      "common.scalars.version": {
        "id": "common.scalars.version",
        "type": "string",
        "format": "version",
        "minLength": 5,
        "maxLength": 12
      },
      "common.scalars.osState": {
        "id": "common.scalars.osState",
        "type": "integer",
        "minimum": 0,
        "maximum": 2
      },
      "common.scalars.os": {
        "id": "common.scalars.os",
        "type": "string",
        "format": "os",
        "minLength": 1,
        "maxLength": 64
      },
      "common.scalars.hex": {
        "id": "common.scalars.hex",
        "type": "string",
        "format": "hex"
      },
      "common.scalars.nonce": {
        "id": "common.scalars.nonce",
        "type": "string",
        "minLength": 16,
        "maxLength": 36
      },
      "common.scalars.balance": {
        "id": "common.scalars.balance",
        "type": "string"
      },
      "common.scalars.signature": {
        "id": "common.scalars.signature",
        "type": "string",
        "format": "signatureBuf"
      },
      "common.scalars.boolInt": {
        "id": "common.scalars.boolInt",
        "type": "integer",
        "enum": [
          1,
          0
        ]
      },
      "common.scalars.boolQuery": {
        "id": "common.scalars.boolQuery",
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "common.scalars.wholeNum": {
        "id": "common.scalars.wholeNum",
        "type": "integer",
        "minimum": 0
      },
      "common.scalars.countingNum": {
        "id": "common.scalars.countingNum",
        "type": "integer",
        "minimum": 1
      },
      "common.scalars.timestamp": {
        "id": "common.scalars.timestamp",
        "type": "integer",
        "minimum": 1
      },
      "common.scalars.datetime": {
        "id": "common.scalars.datetime",
        "type": "string",
        "format": "date-time"
      },
      "common.scalars.stringnum": {
        "id": "common.scalars.stringnum",
        "type": "string",
        "format": "stringnum"
      },
      "responses.accounts.getAccount": {
        "id": "responses.accounts.getAccount",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "account": {
            "type": "object",
            "properties": {
              "address": {
                "id": "common.scalars.address",
                "type": "string",
                "format": "address",
                "minLength": 1,
                "maxLength": 22
              },
              "balance": {
                "id": "common.scalars.balance",
                "type": "string"
              },
              "multisignatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "publicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "secondPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "secondSignature": {
                "id": "common.scalars.boolInt",
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              },
              "u_multisignatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "unconfirmedBalance": {
                "id": "common.scalars.balance",
                "type": "string"
              },
              "unconfirmedSignature": {
                "id": "common.scalars.boolInt",
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              }
            }
          }
        },
        "example": {
          "success": true,
          "account": {
            "address": "8093718274007724701R",
            "balance": "2973803650603",
            "multisignatures": [],
            "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0",
            "secondPublicKey": "e26988a52c519c9766d6f32ec32202b1ab16e77f6e404134222552fb3df23565",
            "unconfirmedBalance": "2973803650603",
            "unconfirmedSignature": 1,
            "secondSignature": 1,
            "u_multisignatures": []
          }
        }
      },
      "responses.accounts.getBalance": {
        "id": "responses.accounts.getBalance",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "balance": {
            "id": "common.scalars.balance",
            "type": "string"
          },
          "unconfirmedBalance": {
            "id": "common.scalars.balance",
            "type": "string"
          }
        },
        "example": {
          "success": true,
          "balance": "2973803650603",
          "unconfirmedBalance": "2973803650603"
        }
      },
      "responses.accounts.getPublickey": {
        "id": "responses.accounts.getPublickey",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "publicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          }
        },
        "example": {
          "success": true,
          "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
        }
      },
      "responses.accounts.getDelegates": {
        "id": "responses.accounts.getDelegates",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "publicKey": {
            "id": "common.scalars.publicKey",
            "type": "string",
            "format": "publicKey"
          },
          "delegates": {
            "type": "array",
            "items": {
              "id": "common.models.Delegate",
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "approval": {
                  "type": "number",
                  "format": "float"
                },
                "missedblocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "producedBlocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "productivity": {
                  "type": "number",
                  "format": "float"
                },
                "publicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rank": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "rate": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "username": {
                  "id": "common.scalars.username",
                  "type": "string",
                  "format": "username",
                  "minLength": 1,
                  "maxLength": 20
                },
                "vote": {
                  "id": "common.scalars.stringnum",
                  "type": "string",
                  "format": "stringnum"
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "delegates": [
            {
              "username": "therisepool",
              "address": "14056190751918729107R",
              "publicKey": "5d3c3c5cdead64d9fe7bc1bf1404ae1378912d77b0243143edf8aff5dda1dbde",
              "vote": 97064376561139,
              "producedblocks": 11939,
              "missedblocks": 409,
              "rate": 19,
              "rank": 19,
              "approval": 0.75,
              "productivity": 96.69
            }
          ]
        }
      },
      "responses.accounts.getDelegatesFee": {
        "id": "responses.accounts.getDelegatesFee",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fee": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "fee": 2500000000
        }
      },
      "responses.accounts.top": {
        "id": "responses.accounts.top",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "balance": {
                  "id": "common.scalars.balance",
                  "type": "string"
                },
                "publicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "accounts": [
            {
              "address": "3262489507414775391R",
              "balance": "1991694.49514931",
              "publicKey": "e433144892f40c838d0ea865dde0915e4fdaecf3521efef585ff306e6513c8fc"
            },
            {
              "address": "8093718274007724701R",
              "balance": "29762.04739711",
              "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
            }
          ]
        }
      },
      "responses.blocks.getBlock": {
        "id": "responses.blocks.getBlock",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "block": {
            "id": "common.models.Block",
            "type": "object",
            "properties": {
              "blockSignature": {
                "id": "common.scalars.hex",
                "type": "string",
                "format": "hex"
              },
              "generatorPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "numberOfTransactions": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "payloadHash": {
                "id": "common.scalars.hex",
                "type": "string",
                "format": "hex"
              },
              "payloadLength": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "previousBlock": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "reward": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "timestamp": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "totalAmount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "totalFee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "Transactions": {
                "type": "array",
                "items": {
                  "id": "common.models.Transaction",
                  "type": "object",
                  "properties": {
                    "amount": {
                      "id": "common.scalars.amount",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 10999999991000000
                    },
                    "type": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 7
                    },
                    "fee": {
                      "id": "common.scalars.amount",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 10999999991000000
                    },
                    "id": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "recipientId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "requesterPublicKey": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    },
                    "rowId": {
                      "id": "common.scalars.wholeNum",
                      "type": "integer",
                      "minimum": 0
                    },
                    "senderId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "senderPublicKey": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    },
                    "signSignature": {
                      "id": "common.scalars.signature",
                      "type": "string",
                      "format": "signatureBuf"
                    },
                    "signature": {
                      "id": "common.scalars.signature",
                      "type": "string",
                      "format": "signatureBuf"
                    },
                    "signatures": {
                      "type": "array",
                      "items": {
                        "id": "common.scalars.signature",
                        "type": "string",
                        "format": "signatureBuf"
                      }
                    },
                    "timestamp": {
                      "id": "common.scalars.timestamp",
                      "type": "integer",
                      "minimum": 1
                    },
                    "asset": {
                      "type": "object",
                      "properties": {
                        "multisignature": {
                          "type": "object",
                          "properties": {
                            "min": {
                              "id": "common.scalars.multisigMin",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 15
                            },
                            "lifetime": {
                              "id": "common.scalars.multisigLifetime",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 72
                            },
                            "keysgroup": {
                              "id": "common.scalars.multisigKeysgroup",
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 15,
                              "items": {
                                "id": "common.scalars.publicKey",
                                "type": "string",
                                "format": "publicKey"
                              }
                            }
                          }
                        },
                        "signature": {
                          "type": "object",
                          "properties": {
                            "publicKey": {
                              "id": "common.scalars.publicKey",
                              "type": "string",
                              "format": "publicKey"
                            }
                          }
                        },
                        "votes": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[-+]{1}[0-9a-z]{64}$"
                          }
                        },
                        "delegate": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "id": "common.scalars.username",
                              "type": "string",
                              "format": "username",
                              "minLength": 1,
                              "maxLength": 20
                            }
                          }
                        }
                      }
                    },
                    "blockId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "confirmations": {
                      "id": "common.scalars.wholeNum",
                      "type": "integer",
                      "minimum": 0
                    },
                    "height": {
                      "id": "common.scalars.height",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "version": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              }
            }
          }
        },
        "example": {
          "success": true,
          "block": {
            "id": "1359353064084280533",
            "rowId": 1356766,
            "version": 0,
            "timestamp": 74366340,
            "height": 1356391,
            "previousBlock": "6501365850122980670",
            "numberOfTransactions": 1,
            "totalAmount": 155090000000,
            "totalFee": 10000000,
            "reward": 1200000000,
            "payloadLength": 117,
            "payloadHash": "8f20883b18d72a47ee3a6dafdbc6d3e398b5e51f7f2d717c33975fd4ad945a34",
            "generatorPublicKey": "c3bf0d2e95d2eb2479ee338915d72430a114c509c453ef21d8a07d6b9a564c19",
            "blockSignature": "8d05f09d9a25a03d6234e36b20ba08467618eab4b2df9c3453606964ba7a030c22044f2fa6018892230a1cc8a04e5d73f122fc770d0629884e5ba6de00a05507",
            "transactions": [
              {
                "signatures": [],
                "id": "5128147624792694927",
                "rowId": 560070,
                "height": 1355968,
                "blockId": "1359353064084280533",
                "type": 0,
                "timestamp": 74366321,
                "senderPublicKey": "7605b8b4baa61efbf493a5e2c783e701226a2200c45bc28ebea8f52ab4ce3188",
                "senderId": "1887676714119818627R",
                "recipientId": "5920507067941756798R",
                "amount": 155090000000,
                "fee": 10000000,
                "signature": "d8c4c0ac3c45781922865dcec37362d2785bbc89bb8e6d0b219e6755c7d72f78beea0fccb6b15442772623d973c722f6cd64d9ad63e896f36688e9bb13f87505",
                "signSignature": null,
                "requesterPublicKey": null,
                "asset": null,
                "confirmations": 29
              }
            ]
          }
        }
      },
      "responses.blocks.getBlocks": {
        "id": "responses.blocks.getBlocks",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "blocks": {
            "type": "array",
            "items": {
              "id": "common.models.Block",
              "type": "object",
              "properties": {
                "blockSignature": {
                  "id": "common.scalars.hex",
                  "type": "string",
                  "format": "hex"
                },
                "generatorPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "height": {
                  "id": "common.scalars.height",
                  "type": "integer",
                  "minimum": 1
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "numberOfTransactions": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "payloadHash": {
                  "id": "common.scalars.hex",
                  "type": "string",
                  "format": "hex"
                },
                "payloadLength": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "previousBlock": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "reward": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "timestamp": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "totalAmount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "totalFee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "Transactions": {
                  "type": "array",
                  "items": {
                    "id": "common.models.Transaction",
                    "type": "object",
                    "properties": {
                      "amount": {
                        "id": "common.scalars.amount",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 10999999991000000
                      },
                      "type": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "fee": {
                        "id": "common.scalars.amount",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 10999999991000000
                      },
                      "id": {
                        "id": "common.scalars.id",
                        "type": "string",
                        "format": "id",
                        "minLength": 1,
                        "maxLength": 20
                      },
                      "recipientId": {
                        "id": "common.scalars.id",
                        "type": "string",
                        "format": "id",
                        "minLength": 1,
                        "maxLength": 20
                      },
                      "requesterPublicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      },
                      "rowId": {
                        "id": "common.scalars.wholeNum",
                        "type": "integer",
                        "minimum": 0
                      },
                      "senderId": {
                        "id": "common.scalars.id",
                        "type": "string",
                        "format": "id",
                        "minLength": 1,
                        "maxLength": 20
                      },
                      "senderPublicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      },
                      "signSignature": {
                        "id": "common.scalars.signature",
                        "type": "string",
                        "format": "signatureBuf"
                      },
                      "signature": {
                        "id": "common.scalars.signature",
                        "type": "string",
                        "format": "signatureBuf"
                      },
                      "signatures": {
                        "type": "array",
                        "items": {
                          "id": "common.scalars.signature",
                          "type": "string",
                          "format": "signatureBuf"
                        }
                      },
                      "timestamp": {
                        "id": "common.scalars.timestamp",
                        "type": "integer",
                        "minimum": 1
                      },
                      "asset": {
                        "type": "object",
                        "properties": {
                          "multisignature": {
                            "type": "object",
                            "properties": {
                              "min": {
                                "id": "common.scalars.multisigMin",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 15
                              },
                              "lifetime": {
                                "id": "common.scalars.multisigLifetime",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 72
                              },
                              "keysgroup": {
                                "id": "common.scalars.multisigKeysgroup",
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 15,
                                "items": {
                                  "id": "common.scalars.publicKey",
                                  "type": "string",
                                  "format": "publicKey"
                                }
                              }
                            }
                          },
                          "signature": {
                            "type": "object",
                            "properties": {
                              "publicKey": {
                                "id": "common.scalars.publicKey",
                                "type": "string",
                                "format": "publicKey"
                              }
                            }
                          },
                          "votes": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "pattern": "^[-+]{1}[0-9a-z]{64}$"
                            }
                          },
                          "delegate": {
                            "type": "object",
                            "properties": {
                              "username": {
                                "id": "common.scalars.username",
                                "type": "string",
                                "format": "username",
                                "minLength": 1,
                                "maxLength": 20
                              }
                            }
                          }
                        }
                      },
                      "blockId": {
                        "id": "common.scalars.id",
                        "type": "string",
                        "format": "id",
                        "minLength": 1,
                        "maxLength": 20
                      },
                      "confirmations": {
                        "id": "common.scalars.wholeNum",
                        "type": "integer",
                        "minimum": 0
                      },
                      "height": {
                        "id": "common.scalars.height",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  }
                },
                "version": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "count": 1356390,
          "blocks": [
            {
              "id": "1359353064084280533",
              "rowId": 1356766,
              "version": 0,
              "timestamp": 74366340,
              "height": 1356391,
              "previousBlock": "6501365850122980670",
              "numberOfTransactions": 1,
              "totalAmount": 155090000000,
              "totalFee": 10000000,
              "reward": 1200000000,
              "payloadLength": 117,
              "payloadHash": "8f20883b18d72a47ee3a6dafdbc6d3e398b5e51f7f2d717c33975fd4ad945a34",
              "generatorPublicKey": "c3bf0d2e95d2eb2479ee338915d72430a114c509c453ef21d8a07d6b9a564c19",
              "blockSignature": "8d05f09d9a25a03d6234e36b20ba08467618eab4b2df9c3453606964ba7a030c22044f2fa6018892230a1cc8a04e5d73f122fc770d0629884e5ba6de00a05507",
              "transactions": [
                {
                  "signatures": [],
                  "id": "5128147624792694927",
                  "rowId": 560070,
                  "height": 1355968,
                  "blockId": "1359353064084280533",
                  "type": 0,
                  "timestamp": 74366321,
                  "senderPublicKey": "7605b8b4baa61efbf493a5e2c783e701226a2200c45bc28ebea8f52ab4ce3188",
                  "senderId": "1887676714119818627R",
                  "recipientId": "5920507067941756798R",
                  "amount": 155090000000,
                  "fee": 10000000,
                  "signature": "d8c4c0ac3c45781922865dcec37362d2785bbc89bb8e6d0b219e6755c7d72f78beea0fccb6b15442772623d973c722f6cd64d9ad63e896f36688e9bb13f87505",
                  "signSignature": null,
                  "requesterPublicKey": null,
                  "asset": null,
                  "confirmations": 29
                }
              ]
            },
            {
              "id": "6501365850122980670",
              "rowId": 1356765,
              "version": 0,
              "timestamp": 74379510,
              "height": 1356390,
              "previousBlock": "14921645259042587857",
              "numberOfTransactions": 0,
              "totalAmount": 0,
              "totalFee": 0,
              "reward": 1200000000,
              "payloadLength": 0,
              "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
              "generatorPublicKey": "16d725d3430beb17638397f48c66f035ed25ddcc02220ab3d311b6a0a3d8f349",
              "blockSignature": "7197567651282ae370066d953d3aa1a5ef99965ca504115ca690e651888d1bb19e10fab0ae95982013143e9c636114a86be7abbdae255e188113d13393ef460a",
              "transactions": []
            },
            {
              "id": "14921645259042587857",
              "rowId": 1356764,
              "version": 0,
              "timestamp": 74379480,
              "height": 1356389,
              "previousBlock": "11101205285804076839",
              "numberOfTransactions": 0,
              "totalAmount": 0,
              "totalFee": 0,
              "reward": 1200000000,
              "payloadLength": 0,
              "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
              "generatorPublicKey": "696a15b1e89a1e9b22858500d982095f4bfbf315b337f6181a6f278602340577",
              "blockSignature": "466ab9de1d95469d2da02ed4fcbc15d2560f512b82b478b7d29e2a00b65dbac5b6df6cab7f02c65affa3d933a1c95e0f7c3f43d9999b5682b355ed57fac7fa09",
              "transactions": []
            }
          ]
        }
      },
      "responses.blocks.getHeight": {
        "id": "responses.blocks.getHeight",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          }
        },
        "example": {
          "success": true,
          "height": 1356378
        }
      },
      "responses.blocks.getFee": {
        "id": "responses.blocks.getFee",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fromHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "toHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "fee": 10000000,
          "fromHeight": 1,
          "toHeight": null,
          "height": 1356378
        }
      },
      "responses.blocks.getFees": {
        "id": "responses.blocks.getFees",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fromHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "toHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "fees": {
            "type": "object",
            "properties": {
              "send": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "vote": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "secondSignature": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "delegate": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "multisignature": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              }
            }
          }
        },
        "example": {
          "success": true,
          "fees": {
            "send": 10000000,
            "vote": 100000000,
            "secondsignature": 500000000,
            "delegate": 2500000000,
            "multisignature": 500000000
          },
          "fromHeight": 1,
          "toHeight": null,
          "height": 1356378
        }
      },
      "responses.blocks.getNethash": {
        "id": "responses.blocks.getNethash",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "nethash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          }
        },
        "example": {
          "success": true,
          "nethash": "cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5"
        }
      },
      "responses.blocks.getMilestone": {
        "id": "responses.blocks.getMilestone",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "milestone": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "milestone": 5
        }
      },
      "responses.blocks.getReward": {
        "id": "responses.blocks.getReward",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "reward": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "reward": 1200000000
        }
      },
      "responses.blocks.getEpoch": {
        "id": "responses.blocks.getEpoch",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "epoch": {
            "id": "common.scalars.datetime",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "success": true,
          "epoch": "2016-05-24T17:00:00.000Z"
        }
      },
      "responses.blocks.getSupply": {
        "id": "responses.blocks.getSupply",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "supply": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "supply": 12943860841000000
        }
      },
      "responses.blocks.getBroadHash": {
        "id": "responses.blocks.getBroadHash",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "broadhash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          }
        },
        "example": {
          "success": true,
          "broadhash": "ab424cb2d4bbf0a4d97cd055039d7d451ef6512e46ea950dd712645149f209dc"
        }
      },
      "responses.blocks.getStatus": {
        "id": "responses.blocks.getStatus",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "broadhash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "epoch": {
            "id": "common.scalars.datetime",
            "type": "string",
            "format": "date-time"
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "milestone": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "nethash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "reward": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "supply": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "broadhash": "ab424cb2d4bbf0a4d97cd055039d7d451ef6512e46ea950dd712645149f209dc",
          "epoch": "2016-05-24T17:00:00.000Z",
          "fee": 10000000,
          "height": 1356378,
          "milestone": 5,
          "nethash": "cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5",
          "reward": 1200000000,
          "supply": 12943860841000000
        }
      },
      "responses.delegates.getDelegates": {
        "id": "responses.delegates.getDelegates",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "delegates": {
            "type": "array",
            "items": {
              "id": "common.models.Delegate",
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "approval": {
                  "type": "number",
                  "format": "float"
                },
                "missedblocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "producedBlocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "productivity": {
                  "type": "number",
                  "format": "float"
                },
                "publicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rank": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "rate": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "username": {
                  "id": "common.scalars.username",
                  "type": "string",
                  "format": "username",
                  "minLength": 1,
                  "maxLength": 20
                },
                "vote": {
                  "id": "common.scalars.stringnum",
                  "type": "string",
                  "format": "stringnum"
                }
              }
            }
          },
          "totalCount": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "delegates": [
            {
              "address": "8093718274007724701R",
              "username": "official_pool",
              "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0",
              "vote": "325086457459378",
              "producedblocks": 13268,
              "missedblocks": 30,
              "rate": 1,
              "rank": 1,
              "approval": 2.51,
              "productivity": 99.77
            },
            {
              "address": "3262489507414775391R",
              "username": "jan",
              "publicKey": "e433144892f40c838d0ea865dde0915e4fdaecf3521efef585ff306e6513c8fc",
              "vote": "206316281125264",
              "producedblocks": 13175,
              "missedblocks": 36,
              "rate": 2,
              "rank": 2,
              "approval": 1.59,
              "productivity": 99.73
            },
            {
              "address": "18103881046813301656R",
              "username": "trnpallypool",
              "publicKey": "029c5489b5e3f7951028b07c2665dedc2072c5454982b945e8d4a24e6a789828",
              "vote": "179239667188718",
              "producedblocks": 12032,
              "missedblocks": 15,
              "rate": 3,
              "rank": 3,
              "approval": 1.38,
              "productivity": 99.88
            }
          ],
          "totalCount": 893
        }
      },
      "responses.delegates.getFee": {
        "id": "responses.delegates.getFee",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "fromHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "toHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          }
        },
        "example": {
          "success": true,
          "fromHeight": 1,
          "height": 1356762,
          "toHeight": null,
          "fee": 2500000000
        }
      },
      "responses.delegates.getForgedByAccount": {
        "id": "responses.delegates.getForgedByAccount",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fees": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          },
          "forged": {
            "id": "common.scalars.stringnum",
            "type": "string",
            "format": "stringnum"
          },
          "rewards": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "fees": 81373069039,
          "forged": "17052373069039",
          "rewards": 16971000000000
        }
      },
      "responses.delegates.getDelegate": {
        "id": "responses.delegates.getDelegate",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "delegate": {
            "id": "common.models.Delegate",
            "type": "object",
            "properties": {
              "address": {
                "id": "common.scalars.address",
                "type": "string",
                "format": "address",
                "minLength": 1,
                "maxLength": 22
              },
              "approval": {
                "type": "number",
                "format": "float"
              },
              "missedblocks": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "producedBlocks": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "productivity": {
                "type": "number",
                "format": "float"
              },
              "publicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rank": {
                "id": "common.scalars.countingNum",
                "type": "integer",
                "minimum": 1
              },
              "rate": {
                "id": "common.scalars.countingNum",
                "type": "integer",
                "minimum": 1
              },
              "username": {
                "id": "common.scalars.username",
                "type": "string",
                "format": "username",
                "minLength": 1,
                "maxLength": 20
              },
              "vote": {
                "id": "common.scalars.stringnum",
                "type": "string",
                "format": "stringnum"
              }
            }
          }
        },
        "example": {
          "success": true,
          "delegate": {
            "address": "8093718274007724701R",
            "username": "official_pool",
            "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0",
            "vote": "325086457459378",
            "producedblocks": 13268,
            "missedblocks": 30,
            "rate": 1,
            "rank": 1,
            "approval": 2.51,
            "productivity": 99.77
          }
        }
      },
      "responses.delegates.getVoters": {
        "id": "responses.delegates.getVoters",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "balance": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "username": {
                  "id": "common.scalars.username",
                  "type": "string",
                  "format": "username",
                  "minLength": 1,
                  "maxLength": 20
                },
                "publicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "accounts": [
            {
              "address": "9255027573703699506R",
              "balance": 10,
              "username": "coolguy",
              "publicKey": "248fe3d613f5f110bd12ac55c90f8bd8e3a018c15dee6c0fdaf4dd6b711a670f"
            },
            {
              "address": "6515902227625427085R",
              "balance": 0,
              "username": null,
              "publicKey": "597ffe0c6bdc5a9ef4c0eed6377326f173059af24fd049df63b339bc22a9f928"
            },
            {
              "address": "10101597481712370665R",
              "balance": 12,
              "username": null,
              "publicKey": "6703661ecd198003366a20c7308c5eafcf85377949af970e375486093938e01a"
            }
          ]
        }
      },
      "responses.delegates.search": {
        "id": "responses.delegates.search",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "delegates": {
            "type": "array",
            "items": {
              "id": "common.models.Delegate",
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "approval": {
                  "type": "number",
                  "format": "float"
                },
                "missedblocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "producedBlocks": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "productivity": {
                  "type": "number",
                  "format": "float"
                },
                "publicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rank": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "rate": {
                  "id": "common.scalars.countingNum",
                  "type": "integer",
                  "minimum": 1
                },
                "username": {
                  "id": "common.scalars.username",
                  "type": "string",
                  "format": "username",
                  "minLength": 1,
                  "maxLength": 20
                },
                "vote": {
                  "id": "common.scalars.stringnum",
                  "type": "string",
                  "format": "stringnum"
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "delegates": [
            {
              "address": "8093718274007724701R",
              "username": "official_pool",
              "publicKey": "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0",
              "vote": "325086457459378",
              "producedblocks": 13268,
              "missedblocks": 30,
              "rate": 1,
              "rank": 1,
              "approval": 2.51,
              "productivity": 99.77
            },
            {
              "address": "18103881046813301656R",
              "username": "trnpallypool",
              "publicKey": "029c5489b5e3f7951028b07c2665dedc2072c5454982b945e8d4a24e6a789828",
              "vote": "179239667188718",
              "producedblocks": 12032,
              "missedblocks": 15,
              "rate": 3,
              "rank": 3,
              "approval": 1.38,
              "productivity": 99.88
            }
          ]
        }
      },
      "responses.delegates.count": {
        "id": "responses.delegates.count",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "count": 5237
        }
      },
      "responses.delegates.getNextForgers": {
        "id": "responses.delegates.getNextForgers",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "currentBlock": {
            "id": "common.models.Block",
            "type": "object",
            "properties": {
              "blockSignature": {
                "id": "common.scalars.hex",
                "type": "string",
                "format": "hex"
              },
              "generatorPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "numberOfTransactions": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "payloadHash": {
                "id": "common.scalars.hex",
                "type": "string",
                "format": "hex"
              },
              "payloadLength": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "previousBlock": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "reward": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "timestamp": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "totalAmount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "totalFee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "Transactions": {
                "type": "array",
                "items": {
                  "id": "common.models.Transaction",
                  "type": "object",
                  "properties": {
                    "amount": {
                      "id": "common.scalars.amount",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 10999999991000000
                    },
                    "type": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 7
                    },
                    "fee": {
                      "id": "common.scalars.amount",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 10999999991000000
                    },
                    "id": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "recipientId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "requesterPublicKey": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    },
                    "rowId": {
                      "id": "common.scalars.wholeNum",
                      "type": "integer",
                      "minimum": 0
                    },
                    "senderId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "senderPublicKey": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    },
                    "signSignature": {
                      "id": "common.scalars.signature",
                      "type": "string",
                      "format": "signatureBuf"
                    },
                    "signature": {
                      "id": "common.scalars.signature",
                      "type": "string",
                      "format": "signatureBuf"
                    },
                    "signatures": {
                      "type": "array",
                      "items": {
                        "id": "common.scalars.signature",
                        "type": "string",
                        "format": "signatureBuf"
                      }
                    },
                    "timestamp": {
                      "id": "common.scalars.timestamp",
                      "type": "integer",
                      "minimum": 1
                    },
                    "asset": {
                      "type": "object",
                      "properties": {
                        "multisignature": {
                          "type": "object",
                          "properties": {
                            "min": {
                              "id": "common.scalars.multisigMin",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 15
                            },
                            "lifetime": {
                              "id": "common.scalars.multisigLifetime",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 72
                            },
                            "keysgroup": {
                              "id": "common.scalars.multisigKeysgroup",
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 15,
                              "items": {
                                "id": "common.scalars.publicKey",
                                "type": "string",
                                "format": "publicKey"
                              }
                            }
                          }
                        },
                        "signature": {
                          "type": "object",
                          "properties": {
                            "publicKey": {
                              "id": "common.scalars.publicKey",
                              "type": "string",
                              "format": "publicKey"
                            }
                          }
                        },
                        "votes": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[-+]{1}[0-9a-z]{64}$"
                          }
                        },
                        "delegate": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "id": "common.scalars.username",
                              "type": "string",
                              "format": "username",
                              "minLength": 1,
                              "maxLength": 20
                            }
                          }
                        }
                      }
                    },
                    "blockId": {
                      "id": "common.scalars.id",
                      "type": "string",
                      "format": "id",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "confirmations": {
                      "id": "common.scalars.wholeNum",
                      "type": "integer",
                      "minimum": 0
                    },
                    "height": {
                      "id": "common.scalars.height",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "version": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "currentBlockSlot": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "currentSlot": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "delegates": {
            "type": "array",
            "items": {
              "id": "common.scalars.publicKey",
              "type": "string",
              "format": "publicKey"
            }
          }
        },
        "example": {
          "success": true,
          "currentBlock": {
            "id": "7608930088168657394",
            "blockSignature": "058b9e59e6db9a68576faea657dd0971c1dfe86b6f3cfec796481a1e815ecbb559e1026ece9b0daac3a24579311af548edb47632f3ed76effe0fd5c8a6743905",
            "generatorPublicKey": "37831fe92d110d1279b02528ca95d89bcfd486ddf465660924eb2e103acd964d",
            "height": 1356718,
            "numberOfTransactions": 0,
            "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
            "payloadLength": 0,
            "previousBlock": "4446098730403296147",
            "reward": 1200000000,
            "timestamp": 74389770,
            "totalAmount": 0,
            "totalFee": 0,
            "version": 0,
            "transactions": []
          },
          "currentBlockSlot": 2479659,
          "currentSlot": 2479659,
          "delegates": [
            "df06ac715314397ae7736d0ad448c6524dc89752ee41147bc6b7dd44948bd8b1",
            "976b9f0c87004fee662de6bdccdbe22125a0de04cb4692ead9c713bd4a201380",
            "0b7bb40385c5261c8cc763babebc9ccf9d392e618dc15104db5efb1c6a5719ee",
            "1413fc21fb3caa48a934b81e04f4a57b8e4042c255f3738135e1e4803dd146cb",
            "b481e38ca5ac6d4db9ad220306d451614aa1603419451d5eaf1eb49db00f18a4",
            "25b51a18f6e90d8436ee1b5ec67cf9eaaf4273d0f9501e7f42e185e8fbd36033",
            "da03aa8bd684eb0b9c62206e284d74e9361d4a2fb8e90c6ee0bd31b79ff56f3f",
            "0134394f4789bade973b36d4c4302eb9156b56a1723f4d4a8e150805a2be583e",
            "ef3c4554a4ab9e581c88d8b4826eff955dde027239b4899304552d83d20dc897",
            "05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328"
          ]
        }
      },
      "responses.delegates.getForgingStatus": {
        "id": "responses.delegates.getForgingStatus",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "delegates": {
            "type": "array",
            "items": {
              "id": "common.scalars.publicKey",
              "type": "string",
              "format": "publicKey"
            }
          }
        },
        "example": {
          "success": true,
          "enabled": true,
          "delegates": [
            "df06ac715314397ae7736d0ad448c6524dc89752ee41147bc6b7dd44948bd8b1",
            "976b9f0c87004fee662de6bdccdbe22125a0de04cb4692ead9c713bd4a201380",
            "0b7bb40385c5261c8cc763babebc9ccf9d392e618dc15104db5efb1c6a5719ee",
            "1413fc21fb3caa48a934b81e04f4a57b8e4042c255f3738135e1e4803dd146cb",
            "b481e38ca5ac6d4db9ad220306d451614aa1603419451d5eaf1eb49db00f18a4",
            "25b51a18f6e90d8436ee1b5ec67cf9eaaf4273d0f9501e7f42e185e8fbd36033",
            "da03aa8bd684eb0b9c62206e284d74e9361d4a2fb8e90c6ee0bd31b79ff56f3f",
            "0134394f4789bade973b36d4c4302eb9156b56a1723f4d4a8e150805a2be583e",
            "ef3c4554a4ab9e581c88d8b4826eff955dde027239b4899304552d83d20dc897",
            "05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328"
          ]
        }
      },
      "responses.delegates.forgingEnable": {
        "id": "responses.delegates.forgingEnable",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": true
        }
      },
      "responses.delegates.forgingDisable": {
        "id": "responses.delegates.forgingDisable",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": true
        }
      },
      "responses.delegates.accessDenied": {
        "id": "responses.delegates.accessDenied",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": false,
          "error": "Delegates API Access Denied"
        }
      },
      "responses.general.deprecated": {
        "id": "responses.general.deprecated",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": false,
          "error": "Method is deprecated"
        }
      },
      "responses.general.success": {
        "id": "responses.general.success",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": true
        }
      },
      "responses.general.error": {
        "id": "responses.general.error",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": false,
          "error": "An error has occured"
        }
      },
      "responses.general.accessDenied": {
        "id": "responses.general.accessDenied",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": false,
          "error": "Secure API Access Denied"
        }
      },
      "responses.loader.getStatus": {
        "id": "responses.loader.getStatus",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "loaded": {
            "type": "boolean"
          }
        },
        "example": {
          "success": true,
          "loaded": true
        }
      },
      "responses.loader.getStatusSync": {
        "id": "responses.loader.getStatusSync",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "broadhash": {
            "id": "common.scalars.hex",
            "type": "string",
            "format": "hex"
          },
          "consensus": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "syncing": {
            "type": "boolean"
          }
        },
        "example": {
          "success": true,
          "broadhash": "fa4a803eaf159154de7c4311580debb068ffd178a03dd793c4799fb04a3997bd",
          "consensus": 97,
          "height": 1356891,
          "syncing": false
        }
      },
      "responses.loader.ping": {
        "id": "responses.loader.ping",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        },
        "example": {
          "success": true
        }
      },
      "responses.multisignatures.getAccounts": {
        "id": "responses.multisignatures.getAccounts",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "id": "common.scalars.address",
                  "type": "string",
                  "format": "address",
                  "minLength": 1,
                  "maxLength": 22
                },
                "balance": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "multisignatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "multilifetime": {
                  "id": "common.scalars.multisigLifetime",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 72
                },
                "multimin": {
                  "id": "common.scalars.multisigMin",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 15
                },
                "multisigaccounts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "id": "common.scalars.address",
                        "type": "string",
                        "format": "address",
                        "minLength": 1,
                        "maxLength": 22
                      },
                      "publicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      },
                      "balance": {
                        "id": "common.scalars.amount",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 10999999991000000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "accounts": [
            {
              "address": "6507244540548668920R",
              "balance": "186507978130",
              "multisignatures": [
                "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
                "c2e81420ee4d0ad3f2cc78e16375cbd6720dc225d5987c2d1467a69193b45b85d371a515313253ecd58216abdce14a462dd9fcecd43a129787b07b958cf99301"
              ],
              "multilifetime": 12,
              "multimin": 2,
              "multisigaccounts": [
                {
                  "address": "5822762156194763844R",
                  "publicKey": "7aa47589efa3089969ffa62ea67d05fb89b1772a279ae950c186785768907408",
                  "balance": "37301595626"
                },
                {
                  "address": "16552458475694562786R",
                  "publicKey": "215e91ad97c027ae2e0fcfa965ecf3f9af412060a94559b8ff8b7b9c4f73381a",
                  "balance": "149206382504"
                }
              ]
            }
          ]
        }
      },
      "responses.multisignatures.getPending": {
        "id": "responses.multisignatures.getPending",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "lifetime": {
            "id": "common.scalars.multisigLifetime",
            "type": "integer",
            "minimum": 1,
            "maximum": 72
          },
          "min": {
            "id": "common.scalars.multisigMin",
            "type": "integer",
            "minimum": 1,
            "maximum": 15
          },
          "max": {
            "id": "common.scalars.multisigMin",
            "type": "integer",
            "minimum": 1,
            "maximum": 15
          },
          "signed": {
            "type": "boolean"
          },
          "transaction": {
            "id": "common.models.MultisigTransaction",
            "type": "object",
            "properties": {
              "amount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
              },
              "fee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "recipientId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "requesterPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "senderId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "senderPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "signSignature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "timestamp": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "asset": {
                "type": "object",
                "properties": {
                  "multisignature": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "id": "common.scalars.multisigMin",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 15
                      },
                      "lifetime": {
                        "id": "common.scalars.multisigLifetime",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 72
                      },
                      "keysgroup": {
                        "id": "common.scalars.multisigKeysgroup",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 15,
                        "items": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    }
                  }
                }
              },
              "blockId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "confirmations": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              }
            }
          }
        },
        "example": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "lifetime": 12,
          "min": 2,
          "max": 2,
          "signed": true,
          "transaction": {
            "signatures": [
              "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
              "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
            ],
            "id": "2800934512471301755",
            "type": 4,
            "timestamp": 37507653,
            "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
            "senderId": "12109113090353923093R",
            "recipientId": "2688837343357225875R",
            "amount": 50000000000,
            "fee": 500000000,
            "signature": null,
            "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
            "requesterPublicKey": null,
            "rowId": 5273,
            "asset": {
              "multisignature": {
                "min": 2,
                "lifetime": 12,
                "keysgroup": [
                  "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                  "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                ]
              }
            },
            "height": 149100,
            "blockId": "1416515249237234263",
            "confirmations": 1215659
          }
        }
      },
      "responses.peers.getPeers": {
        "id": "responses.peers.getPeers",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "peers": {
            "type": "array",
            "items": {
              "id": "common.models.Peer",
              "type": "object",
              "properties": {
                "ip": {
                  "id": "common.scalars.ipAddress",
                  "type": "string",
                  "format": "ip"
                },
                "port": {
                  "id": "common.scalars.port",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 65535
                },
                "state": {
                  "id": "common.scalars.osState",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 2
                },
                "os": {
                  "id": "common.scalars.os",
                  "type": "string",
                  "format": "os",
                  "minLength": 1,
                  "maxLength": 64
                },
                "version": {
                  "id": "common.scalars.version",
                  "type": "string",
                  "format": "version",
                  "minLength": 5,
                  "maxLength": 12
                },
                "broadhash": {
                  "id": "common.scalars.hex",
                  "type": "string",
                  "format": "hex"
                },
                "height": {
                  "id": "common.scalars.height",
                  "type": "integer",
                  "minimum": 1
                },
                "clock": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "updated": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "nonce": "d845b08b-7824-45f3-9033-5317622d0d2f"
              }
            }
          }
        },
        "example": {
          "success": true,
          "peers": [
            {
              "ip": "45.32.178.6",
              "port": 5555,
              "state": 2,
              "os": "linux4.4.0-127-generic",
              "version": "1.0.3",
              "broadhash": "c194859fe6e3e84eeccd588ca50821ce575038aeac242a5ee2eb6aa7f81b78a6",
              "height": 1364618,
              "clock": null,
              "updated": 1538744321864,
              "nonce": "fb55b102-6751-4b70-b199-2375ef82730b"
            },
            {
              "ip": "178.128.215.219",
              "port": 5555,
              "state": 2,
              "os": "linux4.15.0-30-generic",
              "version": "1.1.1",
              "broadhash": "c194859fe6e3e84eeccd588ca50821ce575038aeac242a5ee2eb6aa7f81b78a6",
              "height": 1364618,
              "clock": null,
              "updated": 1538744317157,
              "nonce": "36da9e48-c280-48b8-9a0b-3e2e2a7f59d8"
            },
            {
              "ip": "163.172.133.156",
              "port": 5555,
              "state": 2,
              "os": "linux4.4.103-mainline-rev1",
              "version": "1.1.1",
              "broadhash": "c194859fe6e3e84eeccd588ca50821ce575038aeac242a5ee2eb6aa7f81b78a6",
              "height": 1364618,
              "clock": null,
              "updated": 1538744324232,
              "nonce": "69fb5f37-e671-4c40-9018-b9a756c069f8"
            }
          ]
        }
      },
      "responses.peers.getPeer": {
        "id": "responses.peers.getPeer",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "peer": {
            "id": "common.models.Peer",
            "type": "object",
            "properties": {
              "ip": {
                "id": "common.scalars.ipAddress",
                "type": "string",
                "format": "ip"
              },
              "port": {
                "id": "common.scalars.port",
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "state": {
                "id": "common.scalars.osState",
                "type": "integer",
                "minimum": 0,
                "maximum": 2
              },
              "os": {
                "id": "common.scalars.os",
                "type": "string",
                "format": "os",
                "minLength": 1,
                "maxLength": 64
              },
              "version": {
                "id": "common.scalars.version",
                "type": "string",
                "format": "version",
                "minLength": 5,
                "maxLength": 12
              },
              "broadhash": {
                "id": "common.scalars.hex",
                "type": "string",
                "format": "hex"
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              },
              "clock": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "updated": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "nonce": "d845b08b-7824-45f3-9033-5317622d0d2f"
            }
          }
        },
        "example": {
          "success": true,
          "peer": {
            "ip": "45.32.178.6",
            "port": 5555,
            "state": 2,
            "os": "linux4.4.0-127-generic",
            "version": "1.0.3",
            "broadhash": "c194859fe6e3e84eeccd588ca50821ce575038aeac242a5ee2eb6aa7f81b78a6",
            "height": 1364618,
            "clock": null,
            "updated": 1538744321864,
            "nonce": "fb55b102-6751-4b70-b199-2375ef82730b"
          }
        }
      },
      "responses.peers.version": {
        "id": "responses.peers.version",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "minVersion": {
            "type": "string"
          },
          "version": {
            "id": "common.scalars.version",
            "type": "string",
            "format": "version",
            "minLength": 5,
            "maxLength": 12
          }
        },
        "example": {
          "success": true,
          "build": "",
          "minVersion": ">=0.1.2",
          "version": "1.1.1"
        }
      },
      "responses.peers.count": {
        "id": "responses.peers.count",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "connected": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "disconnected": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "banned": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "connected": 107,
          "disconnected": 0,
          "banned": 0
        }
      },
      "responses.signatures.fees": {
        "id": "responses.signatures.fees",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "fromHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "toHeight": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "height": {
            "id": "common.scalars.height",
            "type": "integer",
            "minimum": 1
          },
          "fee": {
            "id": "common.scalars.amount",
            "type": "integer",
            "minimum": 0,
            "maximum": 10999999991000000
          }
        },
        "example": {
          "success": true,
          "fromHeight": 1,
          "height": 1362861,
          "toHeight": null,
          "fee": 500000000
        }
      },
      "responses.transactions.getTransactions": {
        "id": "responses.transactions.getTransactions",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "transactions": {
            "type": "array",
            "items": {
              "id": "common.models.Transaction",
              "type": "object",
              "properties": {
                "amount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "type": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "fee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "recipientId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "requesterPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "senderId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "senderPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "signSignature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "timestamp": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "multisignature": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "id": "common.scalars.multisigMin",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "lifetime": {
                          "id": "common.scalars.multisigLifetime",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 72
                        },
                        "keysgroup": {
                          "id": "common.scalars.multisigKeysgroup",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 15,
                          "items": {
                            "id": "common.scalars.publicKey",
                            "type": "string",
                            "format": "publicKey"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    },
                    "votes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[-+]{1}[0-9a-z]{64}$"
                      }
                    },
                    "delegate": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "id": "common.scalars.username",
                          "type": "string",
                          "format": "username",
                          "minLength": 1,
                          "maxLength": 20
                        }
                      }
                    }
                  }
                },
                "blockId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "confirmations": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "height": {
                  "id": "common.scalars.height",
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "count": 563381,
          "transactions": [
            {
              "signatures": [],
              "id": "6920969059388666996",
              "type": 0,
              "timestamp": 54069408,
              "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
              "senderId": "1644223775232371040R",
              "recipientId": "3303015780877366956R",
              "amount": 199533766861,
              "fee": 10000000,
              "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230339,
              "asset": null,
              "height": 694239,
              "blockId": "14986452887816815162",
              "confirmations": 670383
            },
            {
              "signatures": [],
              "id": "6059220831601703385",
              "type": 1,
              "timestamp": 54027458,
              "senderPublicKey": "5cc3326c126e56d0f54aa61bfe6d98071c49983505e49e176f017ada1a777c57",
              "senderId": "14470084663212135040R",
              "recipientId": null,
              "amount": 0,
              "fee": 500000000,
              "signature": "c2e81420ee4d0ad3f2cc78e16375cbd6720dc225d5987c2d1467a69193b45b85d371a515313253ecd58216abdce14a462dd9fcecd43a129787b07b958cf99301",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 229412,
              "asset": {
                "signature": {
                  "publicKey": "7a1e8d2721b55ac7e8c2c0a51e297d8caee2b0fd07d72f1389aec9977023f83f"
                }
              },
              "height": 692846,
              "blockId": "11971020380225057286",
              "confirmations": 671776
            },
            {
              "signatures": [],
              "id": "1433374155612627632",
              "type": 2,
              "timestamp": 53952216,
              "senderPublicKey": "a39343f6343f72d08811e2c11c6137ae4246bc6446d199883d1a6668eb62b9dd",
              "senderId": "11334711468380890209R",
              "recipientId": null,
              "amount": 0,
              "fee": 2500000000,
              "signature": "f5fb637d6152af237aa8174c61ef59eadb315c716aafe1f916f347b4b3c8e2a64ac2517c74a8691af0f3cc79b6921f5cd7ae5865766b3e031306f755c053fd00",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 227998,
              "asset": {
                "delegate": {
                  "username": "mbkz"
                }
              },
              "height": 690355,
              "blockId": "1002473113321949051",
              "confirmations": 674267
            },
            {
              "signatures": [],
              "id": "8427347107286041778",
              "type": 3,
              "timestamp": 54068843,
              "senderPublicKey": "72822092a16ce58afea8e76ff609832401695b5d32da2c488c7f9272626be02f",
              "senderId": "7638830122069556640R",
              "recipientId": "7638830122069556640R",
              "amount": 0,
              "fee": 100000000,
              "signature": "a96d28826480e8b5be80ebaf8ba64124a5ecb9201325c5054be7af5ff5ccaca49cbf9f51a89070e6cf4e9b54845ce0f301b1738e44e91f7dd62d7f7c6911e705",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230295,
              "asset": {
                "votes": [
                  "+7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
                ]
              },
              "height": 694221,
              "blockId": "5564349571033117319",
              "confirmations": 670401
            },
            {
              "signatures": [
                "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
                "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
              ],
              "id": "2800934512471301755",
              "type": 4,
              "timestamp": 37507653,
              "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
              "senderId": "12109113090353923093R",
              "recipientId": "2688837343357225875R",
              "amount": 50000000000,
              "fee": 500000000,
              "signature": null,
              "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
              "requesterPublicKey": null,
              "rowId": 5273,
              "asset": {
                "multisignature": {
                  "min": 2,
                  "lifetime": 12,
                  "keysgroup": [
                    "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                    "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                  ]
                }
              },
              "height": 149100,
              "blockId": "1416515249237234263",
              "confirmations": 1215659
            }
          ]
        }
      },
      "responses.transactions.getCount": {
        "id": "responses.transactions.getCount",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "confirmed": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "multisignature": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "queued": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "unconfirmed": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "success": true,
          "confirmed": 563381,
          "multisignature": 0,
          "queued": 1,
          "unconfirmed": 1
        }
      },
      "responses.transactions.getTransaction": {
        "id": "responses.transactions.getTransaction",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "transaction": {
            "id": "common.models.Transaction",
            "type": "object",
            "properties": {
              "amount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
              },
              "fee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "recipientId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "requesterPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "senderId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "senderPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "signSignature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "timestamp": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "asset": {
                "type": "object",
                "properties": {
                  "multisignature": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "id": "common.scalars.multisigMin",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 15
                      },
                      "lifetime": {
                        "id": "common.scalars.multisigLifetime",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 72
                      },
                      "keysgroup": {
                        "id": "common.scalars.multisigKeysgroup",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 15,
                        "items": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    }
                  },
                  "signature": {
                    "type": "object",
                    "properties": {
                      "publicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      }
                    }
                  },
                  "votes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[-+]{1}[0-9a-z]{64}$"
                    }
                  },
                  "delegate": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "id": "common.scalars.username",
                        "type": "string",
                        "format": "username",
                        "minLength": 1,
                        "maxLength": 20
                      }
                    }
                  }
                }
              },
              "blockId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "confirmations": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              },
              "votes": {
                "type": "object",
                "properties": {
                  "added": {
                    "type": "array",
                    "items": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    }
                  },
                  "deleted": {
                    "type": "array",
                    "items": {
                      "id": "common.scalars.publicKey",
                      "type": "string",
                      "format": "publicKey"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "transaction": {
            "signatures": [],
            "id": "8427347107286041778",
            "type": 3,
            "timestamp": 54068843,
            "senderPublicKey": "72822092a16ce58afea8e76ff609832401695b5d32da2c488c7f9272626be02f",
            "senderId": "7638830122069556640R",
            "recipientId": "7638830122069556640R",
            "amount": 0,
            "fee": 100000000,
            "signature": "a96d28826480e8b5be80ebaf8ba64124a5ecb9201325c5054be7af5ff5ccaca49cbf9f51a89070e6cf4e9b54845ce0f301b1738e44e91f7dd62d7f7c6911e705",
            "signSignature": null,
            "requesterPublicKey": null,
            "rowId": 230295,
            "asset": {
              "votes": [
                "+7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
              ]
            },
            "height": 694221,
            "blockId": "5564349571033117319",
            "confirmations": 670401,
            "votes": {
              "added": [
                "7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
              ],
              "deleted": []
            }
          }
        }
      },
      "responses.transactions.getMultiSigs": {
        "id": "responses.transactions.getMultiSigs",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "transactions": {
            "type": "array",
            "items": {
              "id": "common.models.MultisigTransaction",
              "type": "object",
              "properties": {
                "amount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "type": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "fee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "recipientId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "requesterPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "senderId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "senderPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "signSignature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "timestamp": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "multisignature": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "id": "common.scalars.multisigMin",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "lifetime": {
                          "id": "common.scalars.multisigLifetime",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 72
                        },
                        "keysgroup": {
                          "id": "common.scalars.multisigKeysgroup",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 15,
                          "items": {
                            "id": "common.scalars.publicKey",
                            "type": "string",
                            "format": "publicKey"
                          }
                        }
                      }
                    }
                  }
                },
                "blockId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "confirmations": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "height": {
                  "id": "common.scalars.height",
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "count": 102,
          "transactions": [
            {
              "signatures": [
                "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
                "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
              ],
              "id": "2800934512471301755",
              "type": 4,
              "timestamp": 37507653,
              "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
              "senderId": "12109113090353923093R",
              "recipientId": "2688837343357225875R",
              "amount": 50000000000,
              "fee": 500000000,
              "signature": null,
              "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
              "requesterPublicKey": null,
              "rowId": 5273,
              "asset": {
                "multisignature": {
                  "min": 2,
                  "lifetime": 12,
                  "keysgroup": [
                    "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                    "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                  ]
                }
              },
              "height": 149100,
              "blockId": "1416515249237234263",
              "confirmations": 1215659
            }
          ]
        }
      },
      "responses.transactions.getMultiSig": {
        "id": "responses.transactions.getMultiSig",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "transaction": {
            "id": "common.models.MultisigTransaction",
            "type": "object",
            "properties": {
              "amount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
              },
              "fee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "recipientId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "requesterPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "senderId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "senderPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "signSignature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "timestamp": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "asset": {
                "type": "object",
                "properties": {
                  "multisignature": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "id": "common.scalars.multisigMin",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 15
                      },
                      "lifetime": {
                        "id": "common.scalars.multisigLifetime",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 72
                      },
                      "keysgroup": {
                        "id": "common.scalars.multisigKeysgroup",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 15,
                        "items": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    }
                  }
                }
              },
              "blockId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "confirmations": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "height": {
                "id": "common.scalars.height",
                "type": "integer",
                "minimum": 1
              }
            }
          }
        },
        "example": {
          "success": true,
          "transaction": {
            "signatures": [
              "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
              "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
            ],
            "id": "2800934512471301755",
            "type": 4,
            "timestamp": 37507653,
            "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
            "senderId": "12109113090353923093R",
            "recipientId": "2688837343357225875R",
            "amount": 50000000000,
            "fee": 500000000,
            "signature": null,
            "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
            "requesterPublicKey": null,
            "rowId": 5273,
            "asset": {
              "multisignature": {
                "min": 2,
                "lifetime": 12,
                "keysgroup": [
                  "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                  "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                ]
              }
            },
            "height": 149100,
            "blockId": "1416515249237234263",
            "confirmations": 1215659
          }
        }
      },
      "responses.transactions.getQueuedTransactions": {
        "id": "responses.transactions.getQueuedTransactions",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "transactions": {
            "type": "array",
            "items": {
              "id": "common.models.UnconfirmedTransaction",
              "type": "object",
              "properties": {
                "amount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "type": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "fee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "recipientId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "requesterPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "senderId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "senderPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "signSignature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "timestamp": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "multisignature": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "id": "common.scalars.multisigMin",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "lifetime": {
                          "id": "common.scalars.multisigLifetime",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 72
                        },
                        "keysgroup": {
                          "id": "common.scalars.multisigKeysgroup",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 15,
                          "items": {
                            "id": "common.scalars.publicKey",
                            "type": "string",
                            "format": "publicKey"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    },
                    "votes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[-+]{1}[0-9a-z]{64}$"
                      }
                    },
                    "delegate": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "id": "common.scalars.username",
                          "type": "string",
                          "format": "username",
                          "minLength": 1,
                          "maxLength": 20
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "count": 5,
          "transaction": [
            {
              "signatures": [],
              "id": "6920969059388666996",
              "type": 0,
              "timestamp": 54069408,
              "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
              "senderId": "1644223775232371040R",
              "recipientId": "3303015780877366956R",
              "amount": 199533766861,
              "fee": 10000000,
              "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230339,
              "asset": null
            },
            {
              "signatures": [],
              "id": "6059220831601703385",
              "type": 1,
              "timestamp": 54027458,
              "senderPublicKey": "5cc3326c126e56d0f54aa61bfe6d98071c49983505e49e176f017ada1a777c57",
              "senderId": "14470084663212135040R",
              "recipientId": null,
              "amount": 0,
              "fee": 500000000,
              "signature": "c2e81420ee4d0ad3f2cc78e16375cbd6720dc225d5987c2d1467a69193b45b85d371a515313253ecd58216abdce14a462dd9fcecd43a129787b07b958cf99301",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 229412,
              "asset": {
                "signature": {
                  "publicKey": "7a1e8d2721b55ac7e8c2c0a51e297d8caee2b0fd07d72f1389aec9977023f83f"
                }
              }
            },
            {
              "signatures": [],
              "id": "1433374155612627632",
              "type": 2,
              "timestamp": 53952216,
              "senderPublicKey": "a39343f6343f72d08811e2c11c6137ae4246bc6446d199883d1a6668eb62b9dd",
              "senderId": "11334711468380890209R",
              "recipientId": null,
              "amount": 0,
              "fee": 2500000000,
              "signature": "f5fb637d6152af237aa8174c61ef59eadb315c716aafe1f916f347b4b3c8e2a64ac2517c74a8691af0f3cc79b6921f5cd7ae5865766b3e031306f755c053fd00",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 227998,
              "asset": {
                "delegate": {
                  "username": "mbkz"
                }
              }
            },
            {
              "signatures": [],
              "id": "8427347107286041778",
              "type": 3,
              "timestamp": 54068843,
              "senderPublicKey": "72822092a16ce58afea8e76ff609832401695b5d32da2c488c7f9272626be02f",
              "senderId": "7638830122069556640R",
              "recipientId": "7638830122069556640R",
              "amount": 0,
              "fee": 100000000,
              "signature": "a96d28826480e8b5be80ebaf8ba64124a5ecb9201325c5054be7af5ff5ccaca49cbf9f51a89070e6cf4e9b54845ce0f301b1738e44e91f7dd62d7f7c6911e705",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230295,
              "asset": {
                "votes": [
                  "+7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
                ]
              }
            },
            {
              "signatures": [
                "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
                "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
              ],
              "id": "2800934512471301755",
              "type": 4,
              "timestamp": 37507653,
              "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
              "senderId": "12109113090353923093R",
              "recipientId": "2688837343357225875R",
              "amount": 50000000000,
              "fee": 500000000,
              "signature": null,
              "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
              "requesterPublicKey": null,
              "rowId": 5273,
              "asset": {
                "multisignature": {
                  "min": 2,
                  "lifetime": 12,
                  "keysgroup": [
                    "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                    "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                  ]
                }
              }
            }
          ]
        }
      },
      "responses.transactions.getQueuedTransaction": {
        "id": "responses.transactions.getQueuedTransaction",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "transaction": {
            "id": "common.models.UnconfirmedTransaction",
            "type": "object",
            "properties": {
              "amount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
              },
              "fee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "recipientId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "requesterPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "senderId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "senderPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "signSignature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "timestamp": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "asset": {
                "type": "object",
                "properties": {
                  "multisignature": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "id": "common.scalars.multisigMin",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 15
                      },
                      "lifetime": {
                        "id": "common.scalars.multisigLifetime",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 72
                      },
                      "keysgroup": {
                        "id": "common.scalars.multisigKeysgroup",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 15,
                        "items": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    }
                  },
                  "signature": {
                    "type": "object",
                    "properties": {
                      "publicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      }
                    }
                  },
                  "votes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[-+]{1}[0-9a-z]{64}$"
                    }
                  },
                  "delegate": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "id": "common.scalars.username",
                        "type": "string",
                        "format": "username",
                        "minLength": 1,
                        "maxLength": 20
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "transaction": {
            "signatures": [],
            "id": "6920969059388666996",
            "type": 0,
            "timestamp": 54069408,
            "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
            "senderId": "1644223775232371040R",
            "recipientId": "3303015780877366956R",
            "amount": 199533766861,
            "fee": 10000000,
            "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
            "signSignature": null,
            "requesterPublicKey": null,
            "rowId": 230339,
            "asset": null
          }
        }
      },
      "responses.transactions.getUnconfirmedTransactions": {
        "id": "responses.transactions.getUnconfirmedTransactions",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "count": {
            "id": "common.scalars.wholeNum",
            "type": "integer",
            "minimum": 0
          },
          "transactions": {
            "type": "array",
            "items": {
              "id": "common.models.UnconfirmedTransaction",
              "type": "object",
              "properties": {
                "amount": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "type": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "fee": {
                  "id": "common.scalars.amount",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10999999991000000
                },
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "recipientId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "requesterPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "rowId": {
                  "id": "common.scalars.wholeNum",
                  "type": "integer",
                  "minimum": 0
                },
                "senderId": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "senderPublicKey": {
                  "id": "common.scalars.publicKey",
                  "type": "string",
                  "format": "publicKey"
                },
                "signSignature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signature": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "common.scalars.signature",
                    "type": "string",
                    "format": "signatureBuf"
                  }
                },
                "timestamp": {
                  "id": "common.scalars.timestamp",
                  "type": "integer",
                  "minimum": 1
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "multisignature": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "id": "common.scalars.multisigMin",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "lifetime": {
                          "id": "common.scalars.multisigLifetime",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 72
                        },
                        "keysgroup": {
                          "id": "common.scalars.multisigKeysgroup",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 15,
                          "items": {
                            "id": "common.scalars.publicKey",
                            "type": "string",
                            "format": "publicKey"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    },
                    "votes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[-+]{1}[0-9a-z]{64}$"
                      }
                    },
                    "delegate": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "id": "common.scalars.username",
                          "type": "string",
                          "format": "username",
                          "minLength": 1,
                          "maxLength": 20
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "count": 5,
          "transaction": [
            {
              "signatures": [],
              "id": "6920969059388666996",
              "type": 0,
              "timestamp": 54069408,
              "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
              "senderId": "1644223775232371040R",
              "recipientId": "3303015780877366956R",
              "amount": 199533766861,
              "fee": 10000000,
              "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230339,
              "asset": null
            },
            {
              "signatures": [],
              "id": "6059220831601703385",
              "type": 1,
              "timestamp": 54027458,
              "senderPublicKey": "5cc3326c126e56d0f54aa61bfe6d98071c49983505e49e176f017ada1a777c57",
              "senderId": "14470084663212135040R",
              "recipientId": null,
              "amount": 0,
              "fee": 500000000,
              "signature": "c2e81420ee4d0ad3f2cc78e16375cbd6720dc225d5987c2d1467a69193b45b85d371a515313253ecd58216abdce14a462dd9fcecd43a129787b07b958cf99301",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 229412,
              "asset": {
                "signature": {
                  "publicKey": "7a1e8d2721b55ac7e8c2c0a51e297d8caee2b0fd07d72f1389aec9977023f83f"
                }
              }
            },
            {
              "signatures": [],
              "id": "1433374155612627632",
              "type": 2,
              "timestamp": 53952216,
              "senderPublicKey": "a39343f6343f72d08811e2c11c6137ae4246bc6446d199883d1a6668eb62b9dd",
              "senderId": "11334711468380890209R",
              "recipientId": null,
              "amount": 0,
              "fee": 2500000000,
              "signature": "f5fb637d6152af237aa8174c61ef59eadb315c716aafe1f916f347b4b3c8e2a64ac2517c74a8691af0f3cc79b6921f5cd7ae5865766b3e031306f755c053fd00",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 227998,
              "asset": {
                "delegate": {
                  "username": "mbkz"
                }
              }
            },
            {
              "signatures": [],
              "id": "8427347107286041778",
              "type": 3,
              "timestamp": 54068843,
              "senderPublicKey": "72822092a16ce58afea8e76ff609832401695b5d32da2c488c7f9272626be02f",
              "senderId": "7638830122069556640R",
              "recipientId": "7638830122069556640R",
              "amount": 0,
              "fee": 100000000,
              "signature": "a96d28826480e8b5be80ebaf8ba64124a5ecb9201325c5054be7af5ff5ccaca49cbf9f51a89070e6cf4e9b54845ce0f301b1738e44e91f7dd62d7f7c6911e705",
              "signSignature": null,
              "requesterPublicKey": null,
              "rowId": 230295,
              "asset": {
                "votes": [
                  "+7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0"
                ]
              }
            },
            {
              "signatures": [
                "c0aae9fbc57aed5c5bb4ff54b1f508759b868965164a3fafbe1b58cc8bd3ea84786b4b3eb7ab4db1036f2fe1b30f9cc293ce966fa281c677928d2d4dcefd710f",
                "9bbe5e04cbe277091f6291d9f136ba1581d31bef6ca5946f42010bc2fa0dbaa0d0079057087e8e147754f316d13389c6a8aed954a30ef408415ad71f99469201"
              ],
              "id": "2800934512471301755",
              "type": 4,
              "timestamp": 37507653,
              "senderPublicKey": "00f928f3e3bc136e74eef1aa75df7b43a99cf22fce74a4a93b0c618bed6f60d1",
              "senderId": "12109113090353923093R",
              "recipientId": "2688837343357225875R",
              "amount": 50000000000,
              "fee": 500000000,
              "signature": null,
              "signSignature": "a96621f7f14bcfde6b7819f0a68e0535df413d489a2c39ab0a28db73d8ae4ee59885d6ac2858386b2b369aba19c8491c0df5bfd79ca898a91a96039e9b6ba908",
              "requesterPublicKey": null,
              "rowId": 5273,
              "asset": {
                "multisignature": {
                  "min": 2,
                  "lifetime": 12,
                  "keysgroup": [
                    "b759b3f12e927560f5dd85fd63ae3964cd907f0cef732e5913fd200505444059",
                    "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3"
                  ]
                }
              }
            }
          ]
        }
      },
      "responses.transactions.getUnconfirmedTransaction": {
        "id": "responses.transactions.getUnconfirmedTransaction",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "transaction": {
            "id": "common.models.UnconfirmedTransaction",
            "type": "object",
            "properties": {
              "amount": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
              },
              "fee": {
                "id": "common.scalars.amount",
                "type": "integer",
                "minimum": 0,
                "maximum": 10999999991000000
              },
              "id": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "recipientId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "requesterPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "rowId": {
                "id": "common.scalars.wholeNum",
                "type": "integer",
                "minimum": 0
              },
              "senderId": {
                "id": "common.scalars.id",
                "type": "string",
                "format": "id",
                "minLength": 1,
                "maxLength": 20
              },
              "senderPublicKey": {
                "id": "common.scalars.publicKey",
                "type": "string",
                "format": "publicKey"
              },
              "signSignature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signature": {
                "id": "common.scalars.signature",
                "type": "string",
                "format": "signatureBuf"
              },
              "signatures": {
                "type": "array",
                "items": {
                  "id": "common.scalars.signature",
                  "type": "string",
                  "format": "signatureBuf"
                }
              },
              "timestamp": {
                "id": "common.scalars.timestamp",
                "type": "integer",
                "minimum": 1
              },
              "asset": {
                "type": "object",
                "properties": {
                  "multisignature": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "id": "common.scalars.multisigMin",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 15
                      },
                      "lifetime": {
                        "id": "common.scalars.multisigLifetime",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 72
                      },
                      "keysgroup": {
                        "id": "common.scalars.multisigKeysgroup",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 15,
                        "items": {
                          "id": "common.scalars.publicKey",
                          "type": "string",
                          "format": "publicKey"
                        }
                      }
                    }
                  },
                  "signature": {
                    "type": "object",
                    "properties": {
                      "publicKey": {
                        "id": "common.scalars.publicKey",
                        "type": "string",
                        "format": "publicKey"
                      }
                    }
                  },
                  "votes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[-+]{1}[0-9a-z]{64}$"
                    }
                  },
                  "delegate": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "id": "common.scalars.username",
                        "type": "string",
                        "format": "username",
                        "minLength": 1,
                        "maxLength": 20
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "transaction": {
            "signatures": [],
            "id": "6920969059388666996",
            "type": 0,
            "timestamp": 54069408,
            "senderPublicKey": "bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3",
            "senderId": "1644223775232371040R",
            "recipientId": "3303015780877366956R",
            "amount": 199533766861,
            "fee": 10000000,
            "signature": "12a4afbb3c9cf449d14745a190b874a7e0d44c00c8bd68284a826a4e825b0662b59b48df2f8d8ba5f85b3a68dac35b97896224623a86a0d661d669dd9df0ba07",
            "signSignature": null,
            "requesterPublicKey": null,
            "rowId": 230339,
            "asset": null
          }
        }
      },
      "responses.transactions.localCreate": {
        "id": "responses.transactions.localCreate",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "transactionId": {
            "id": "common.scalars.id",
            "type": "string",
            "format": "id",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "example": {
          "success": true,
          "transactionId": "6920969059388666996"
        }
      },
      "responses.transactions.put": {
        "id": "responses.transactions.put",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "accepted": {
            "type": "array",
            "items": {
              "id": "common.scalars.id",
              "type": "string",
              "format": "id",
              "minLength": 1,
              "maxLength": 20
            }
          },
          "invalid": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "id": "common.scalars.id",
                  "type": "string",
                  "format": "id",
                  "minLength": 1,
                  "maxLength": 20
                },
                "reason": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "success": true,
          "accepted": [
            "6920969059388666996"
          ],
          "invalid": [
            {
              "id": "6059220831601703385",
              "reason": "Failed to validated transaction schema"
            }
          ]
        }
      }
    }
  },
  "info": {
    "title": "RISE Node",
    "version": "1.2.0",
    "description": "## Rise-node version 1.2.0\n\n# RISE\n[![Build Status](https://travis-ci.org/RiseVision/rise-node.svg?branch=development)](https://travis-ci.org/RiseVision/rise-node) [![Coverage Status](https://coveralls.io/repos/github/RiseVision/rise-node/badge.svg?branch=development)](https://coveralls.io/github/RiseVision/rise-node?branch=development) \n## Installation\n\nAn automatic install script for Ubuntu is available.\n\n### Wiki \n\nFor detailed information on node installation and management please refer to the [wiki of this repository](https://github.com/RiseVision/rise-node/wiki).\n\n### Quick start Rise installation (Mainnet)\n\nFirst, perform some basic checks:\n\n- MAKE SURE NOT TO RUN AS ROOT OR WITH SUDO\n- Your user will need sudo privileges, though\n- PostgresSQL must **not** be installed on your server\n\nThen go home:\n\n```\ncd $HOME\n```\n\nDownload the installer:\n\n```\nwget https://raw.githubusercontent.com/RiseVision/rise-build/master/scripts/install.sh\n```\n\nInstall Rise:\n```\nbash install.sh install -r mainnet -u https://downloads.rise.vision/core/mainnet/latest.tar.gz\n```\n\nThe installer will start the node automatically if installation was successful.\n\n(Optional) Fast sync from a snapshot\n\n```\ncd rise\nwget https://downloads.rise.vision/snapshots/mainnet/latest -O latestsnap.gz\n./manager.sh restoreBackup latestsnap.gz\n```\n\n## Basic node management\n\nInstaller will create a `rise` folder in your homedir. Make sure to `cd` to this dir when managing your node.\n\n\nCheck the status of your node with:\n```\n./manager.sh status\n```\n\nStop node with: \n```\n./manager.sh stop node\n```\n\nInsert your passphrase so you can forge:\n```\nnano etc/node_config.json\n```\n\nAnd change this section to include your passphrase:\n```\n{\n  \"fileLogLevel\": \"error\",\n  \"forging\": {\n    \"secret\": [ \"my secret\" ],\n    \"access\": {\n      \"whiteList\": [ \"127.0.0.1\" ]\n    }\n  }\n}\n```\n\nAnd finally restart your node to apply the changes:\n```\n./manager.sh reload node\n```\n\n### Quick start Rise installation (Testnet) \nThe same as above, only the install step is different:\n```\nbash install.sh install -r testnet -u https://downloads.rise.vision/core/testnet/latest.tar.gz\n```\n\n\n(Optional) Fast sync from a snapshot\n\n```\nwget https://downloads.rise.vision/snapshots/testnet/latest -O latestsnap.gz\n./manager.sh restoreBackup latestsnap.gz\n```\n\n## Authors\n- Andrea B. <vekexasia+crypto@gmail.com>\n- Jan <lepetitjan@icloud.com>\n- Mariusz Serek <mariusz@serek.net>\n- Goldeneye (Shift Team)\n- Ralfs (Shift Team)\n- Joey <shiftcurrency@gmail.com>\n- Boris Povod <boris@crypti.me>\n- Pavel Nekrasov <landgraf.paul@gmail.com>\n- Sebastian Stupurac <stupurac.sebastian@gmail.com>\n- Oliver Beddows <oliver@lightcurve.io>\n- Isabella Dell <isabella@lightcurve.io>\n- Marius Serek <mariusz@serek.net>\n- Maciej Baj <maciej@lightcurve.io>\n\n## License\n\nCopyright © 2017 Rise<br>\nCopyright © 2016-2017 Shift<br>  \nCopyright © 2016-2017 Lisk Foundation\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the [GNU General Public License](https://github.com/RiseVision/rise-node/src/master/LICENSE) along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n***\n\nThis program also incorporates work previously released with lisk `0.7.0` (and earlier) versions under the [MIT License](https://opensource.org/licenses/MIT). To comply with the requirements of that license, the following permission notice, applicable to those parts of the code only, is included below:\n\nCopyright © 2017 Rise<br>\nCopyright © 2016-2017 Shift<br>\nCopyright © 2016-2017 Lisk Foundation<br>  \nCopyright © 2015 Crypti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/accounts/": {
      "get": {
        "operationId": "AccountsAPI.getAccount",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getAccount",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getAccount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Account",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account object by its address or public key",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getAccount('8093718274007724701R')\n  .then(function({ account }) {\n    console.log(account.balance) // 2973803650603\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    acc = api.accounts.get_account('8093718274007724701R')\n    print('Balance: {} RISE'.format(acc.balance.to_unit()))\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Accounts.get_account(%{address: \"8093718274007724701R\"})\n  IO.puts(\"Balance: #{result[\"account\"][\"balance\"]} RISE\")\n  # Balance: 3370390005074 RISE\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/getBalance": {
      "get": {
        "operationId": "AccountsAPI.getBalance",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getBalance",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getBalance"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getBalance"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Balance",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account's RISE balance its address",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getBalance('8093718274007724701R')\n  .then(function({ balance }) {\n    console.log(balance) // 2973803650603\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Accounts.get_balance(%{address: \"8093718274007724701R\"})\n  IO.puts(\"Balance: #{result[\"balance\"]} RISE\")\n  # Balance: 3370390005074 RISE\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/getPublicKey": {
      "get": {
        "operationId": "AccountsAPI.getPublickey",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getPublickey",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getPublickey"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getPublickey"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Public Key",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account's public key by its address",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getPublicKey('8093718274007724701R')\n  .then(function({ publicKey }) {\n    console.log(publicKey) // \"7067a911f3a4...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Accounts.get_publicKey(%{address: \"6507244540548668920R\"})\n  IO.puts(\"PublicKey: #{result[\"publicKey\"]}\")\n  # PublicKey: 7f47eb8161678a776d63d100508bf5bb5865361481e3054428c66ab9432b2b01\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/delegates": {
      "get": {
        "operationId": "AccountsAPI.getDelegates",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getDelegates",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getDelegates"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getDelegates"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Account Delegates",
        "tags": [
          "Accounts API"
        ],
        "description": "Fetch a list of delegates a certain account has voted for",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getDelegates('8093718274007724701R')\n  .then(function({ delegates }) {\n    console.log(delegates[0].publicKey) // \"5d3c3c5cdead6...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    delegates = api.accounts.get_account_delegates('8093718274007724701R')\n    print(delegates[0].public_key.hex())\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Accounts.get_delegates(%{address: \"8093718274007724701R\"})\n  IO.puts(\"Delegate publicKey: #{Enum.at(result[\"delegates\"], 0)[\"publicKey\"]}\")\n  # Delegate publicKey: aaabdbb92c4bd64b175c6228f3a868ca2bbe8ff034d160364bf3e2f448148aa3\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      },
      "put": {
        "operationId": "AccountsAPI.addDelegate",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Delegate",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/delegates/fee": {
      "get": {
        "operationId": "AccountsAPI.getDelegatesFee",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getDelegatesFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getDelegatesFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getDelegatesFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegates Fee",
        "tags": [
          "Accounts API"
        ],
        "description": "\nGet the fee for registering as a delegate at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/top": {
      "get": {
        "operationId": "AccountsAPI.topAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.top",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.top"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.top"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.error"
                }
              }
            },
            "description": "Top Accounts is not enabled"
          }
        },
        "summary": "Get Top Accounts",
        "tags": [
          "Accounts API"
        ],
        "description": "\nGet a list of accounts sorted by descending balance.\n_Top accounts must be enabled on the providing node_\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/open": {
      "post": {
        "operationId": "AccountsAPI.open",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts.openAccount"
              }
            }
          },
          "description": "accounts.openAccount",
          "required": false
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Open Account",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/accounts/generatePublicKey": {
      "post": {
        "operationId": "AccountsAPI.generatePublicKey",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Generate Public Key",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use a client library like\n[vekexasia/dpos-offline](https://github.com/vekexasia/dpos-offline)\nto generate public keys_. Generates a public key.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/": {
      "get": {
        "operationId": "BlocksAPI.getBlocks",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getBlocks",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getBlocks"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBlocks"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Block List",
        "tags": [
          "Blocks API"
        ],
        "description": "Retrieve blocks from the RISE blockchain. Defaults to last 100 blocks",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getBlocks({ limit: 3 })\n  .then(function({ blocks }) {\n    console.log(blocks[0].id) // 1359353064084280533\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.blocks.get_blocks(limit=3)\n    print(res.blocks[0].block_id) # 1894880255589205181\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Blocks.get(%{limit: 3})\n  IO.puts(\"Block id: #{Enum.at(result[\"blocks\"], 0)[\"id\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/get": {
      "get": {
        "operationId": "BlocksAPI.getBlock",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getBlock",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getBlock"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBlock"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Block",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch block by block id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getBlock('1359353064084280533')\n  .then(function({ block }) {\n    console.log(block.id) // 1359353064084280533\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    block = api.blocks.get_block('1359353064084280533')\n    print(block.height)\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Blocks.get(%{id: \"16907575157603209054\"})\n  IO.puts(\"Block Height: #{Enum.at(result[\"blocks\"], 0)[\"height\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getHeight": {
      "get": {
        "operationId": "BlocksAPI.getHeight",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getHeight"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Height",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch current blockchain height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getHeight()\n  .then(function({ height }) {\n    console.log(height) // 1356378\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getBroadhash": {
      "get": {
        "operationId": "BlocksAPI.getBroadHash",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBroadHash"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Broadhash",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the current broadhash from the network",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getEpoch": {
      "get": {
        "operationId": "BlocksAPI.getEpoch",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getEpoch"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Epoch",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the RISE epoch time in ISO8601 format",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getFee": {
      "get": {
        "operationId": "BlocksAPI.getFee",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Send Fee",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the fee for sending a transaction at a certain height. Defaults to current height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getFee()\n  .then(function({ fee }) {\n    console.log(fee) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getFees": {
      "get": {
        "operationId": "BlocksAPI.getFees",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getFees",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getFees"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getFees"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Fee Schedule",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch fees for all transaction types at a certain height. Defaults to current height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getFeeSchedule()\n  .then(function({ fees }) {\n    console.log(fees.send) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.blocks.get_fees()\n    print(res.fees.send) # 10000000\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Blocks.get_fees(%{height: 1})\n  IO.puts(\"Block send fee: #{result[\"fees\"][\"send\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getNethash": {
      "get": {
        "operationId": "BlocksAPI.getNethash",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getNethash"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Nethash",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the Nethash from the network",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getNethash()\n  .then(function({ nethash }) {\n    console.log(nethash) // cd8171332c...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getMilestone": {
      "get": {
        "operationId": "BlocksAPI.getMilestone",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getMilestone"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Milestone",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current milestone in reference to rewards for mining",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getMilestone()\n  .then(function({ milestone }) {\n    console.log(milestone) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getReward": {
      "get": {
        "operationId": "BlocksAPI.getReward",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getReward"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Reward",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current reward for mining a block",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getReward()\n  .then(function({ reward }) {\n    console.log(reward) // 1200000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getSupply": {
      "get": {
        "operationId": "BlocksAPI.getSupply",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getSupply"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Supply",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current RISE token supply",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getSupply()\n  .then(function({ supply }) {\n    console.log(supply) // 12943860841000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/blocks/getStatus": {
      "get": {
        "operationId": "BlocksAPI.getStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getStatus"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Blockchain Status",
        "tags": [
          "Blocks API"
        ],
        "description": "Get collected blockchain status information",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getStatus()\n  .then(function({ height }) {\n    console.log(height) // 1356378\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    status = api.blocks.get_status()\n    print(status.height) # 1356378\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  status = RiseElixir.Blocks.get_status()\n  IO.puts(status[\"height\"])\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/": {
      "get": {
        "operationId": "DelegatesAPI.getDelegates",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getDelegates",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getDelegates"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getDelegates"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate List",
        "tags": [
          "Delegates API"
        ],
        "description": "\nGet list of delegates sorted by rank.\nDefaults to top 101 delegates (e.g. active delegates)\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getList()\n  .then(function({ delegates }) {\n    console.log(delegates[0].username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.delegates.get_delegates(limit=3)\n    print(res.delegates[0].username) # official_pool\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Delegates.get(%{limit: 3})\n  IO.puts(\"Delegate username: #{Enum.at(result[\"delegates\"], 0)[\"username\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      },
      "put": {
        "operationId": "DelegatesAPI.createDelegate",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Delegate",
        "tags": [
          "Delegates API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/fee": {
      "get": {
        "operationId": "DelegatesAPI.getFee",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegates Fee",
        "tags": [
          "Delegates API"
        ],
        "description": "\nGet the fee for registering as a delegate at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/forging/getForgedByAccount": {
      "get": {
        "operationId": "DelegatesAPI.getForgedByAccount",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getForgedByAccount",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getForgedByAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getForgedByAccount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Forged by Account",
        "tags": [
          "Delegates API"
        ],
        "description": "Get earnings from forging by account public key",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getForgedByAccount(\n    '7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0'\n  )\n  .then(function({ forged }) {\n    console.log(forged) // 19066025346961\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import PublicKey, APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ndelegate_pk = PublicKey.fromhex('7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0')\ntry:\n    res = api.delegates.get_forged_by_account(delegate_pk)\n    print(res.forged) # 19066025346961\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Delegates.get_forged_by_account(%{\n      generatorPublicKey: \"7f31f1b13f211ada60b61e47778b8d59e7f0ecb56fd6f9ea9200c805e352f6a8\"\n    })\n\n  IO.puts(\"Forged: #{result[\"forged\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/get": {
      "get": {
        "operationId": "DelegatesAPI.getDelegate",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getDelegate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getDelegate"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getDelegate"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve delegate account and associated stats by public key or username",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getByPublicKey(\n    '7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0'\n  )\n  .then(function({ delegate }) {\n    console.log(delegate.username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import PublicKey, APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ndelegate_pk = PublicKey.fromhex('7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0')\ntry:\n    delegate = api.delegates.get_delegate(delegate_pk)\n    print(delegate.username) # official_pool\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Delegates.get_delegate(%{\n      generatorPublicKey: \"7f31f1b13f211ada60b61e47778b8d59e7f0ecb56fd6f9ea9200c805e352f6a8\"\n    })\n\n  IO.puts(result[\"forged\"])\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/voters": {
      "get": {
        "operationId": "DelegatesAPI.getVoters",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getVoters",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getVoters"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getVoters"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Voters",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve a list of accounts which voted for a delegate",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getVoters('a65a8160b1e0733f66d1f1a8f322c9af29b26d5e491a84d6e3ae0ec43e000446')\n  .then(function({ accounts }) {\n    console.log(accounts.length) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import PublicKey, APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ndelegate_pk = PublicKey.fromhex('a65a8160b1e0733f66d1f1a8f322c9af29b26d5e491a84d6e3ae0ec43e000446')\ntry:\n    voters = api.delegates.get_voters(delegate_pk)\n    print(len(voters)) # 5\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Delegates.get_voters(%{\n      publicKey: \"7f31f1b13f211ada60b61e47778b8d59e7f0ecb56fd6f9ea9200c805e352f6a8\"\n    })\n\n  IO.puts(Enum.count(result[\"accounts\"]))\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/search": {
      "get": {
        "operationId": "DelegatesAPI.search",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.search"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.search"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Search Delegates",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve a list of delegates whose usernames are like the search query",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .search({ q: 'pool' })\n  .then(function({ delegates }) {\n    console.log(delegates[0].username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    delegates = api.delegates.search_delegates('pool')\n    print(delegates[0].username) # official_pool\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Delegates.search(%{\n      q: \"pool\",\n      limit: 2\n    })\n\n  IO.puts(Enum.count(result[\"delegates\"]))\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/count": {
      "get": {
        "operationId": "DelegatesAPI.count",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.count"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate Count",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve the total number of registered delegates",
        "x-code-samples": [
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    count = api.delegates.get_delegate_count()\n    print(count) # 5278\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  delegates_count = RiseElixir.Delegates.get_count()\n  IO.puts(delegates_count[\"count\"])\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/getNextForgers": {
      "get": {
        "operationId": "DelegatesAPI.getNextForgers",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getNextForgers"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Next Forgers",
        "tags": [
          "Delegates API"
        ],
        "description": "\nRetrieve the current slot and block to be forged,\nas well as the list of the next delegates' public keys in the round (defaults to 10)\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getNextForgers()\n  .then(function({ delegates }) {\n    console.log(delegates[0]) // a65a8160b1e07...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.delegates.get_next_forgers()\n    print(res.delegates[0].hex()) # a65a8160b1e07...\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Delegates.get_next_forgers(%{})\n  IO.puts(Enum.at(result[\"delegates\"], 0))\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/forging/status": {
      "get": {
        "operationId": "DelegatesAPI.getForgingStatus",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.forgingStatus",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.forgingStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getForgingStatus"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Get Forging Status",
        "tags": [
          "Delegates API"
        ],
        "description": "\nChecks to see if forging is enabled for the network or a public key if provided.\n_Forging APIs must be enabled on the providing node_\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getForgingStatus()\n  .then(function({ enabled }) {\n    console.log(enabled) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('http://localhost:5566/api/')\ntry:\n    res = api.delegates.get_forging_status()\n    print(res.enabled) # true\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Delegates.get_forging_status(%{\n      generatorPublicKey: \"7f31f1b13f211ada60b61e47778b8d59e7f0ecb56fd6f9ea9200c805e352f6a8\"\n    })\n\n  IO.puts(result[\"enabled\"]) #true\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/forging/enable": {
      "post": {
        "operationId": "DelegatesAPI.forgingEnable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegates.disableForging"
              }
            }
          },
          "description": "delegates.disableForging",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.forgingEnable"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Enable Forging",
        "tags": [
          "Delegates API"
        ],
        "description": "\nEnable forging for a secret / public key pair.\n_Forging APIs must be enabled on the providing node_\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/delegates/forging/disable": {
      "post": {
        "operationId": "DelegatesAPI.forgingDisable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegates.disableForging"
              }
            }
          },
          "description": "delegates.disableForging",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.forgingDisable"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Disable Forging",
        "tags": [
          "Delegates API"
        ],
        "description": "\nDisable forging for a secret / public key pair.\n_Forging APIs must be enabled on the providing node_\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/loader/status/": {
      "get": {
        "operationId": "LoaderAPI.getStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.getStatus"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Loader Status",
        "tags": [
          "Loader API"
        ],
        "description": "Check to see if blockchain has been loaded by node",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.loader\n  .status()\n  .then(function({ loaded }) {\n    console.log(loaded) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Loader.get_status()\n  IO.puts(\"Loader status: #{result[\"loaded\"]}\")\n  # true\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/loader/status/sync": {
      "get": {
        "operationId": "LoaderAPI.getStatusSync",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.getStatusSync"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Loader Sync Status",
        "tags": [
          "Loader API"
        ],
        "description": "Retrieve current status of node's blockchain sync",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.loader\n  .syncStatus()\n  .then(function({ syncing }) {\n    console.log(syncing) // false\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Loader.get_sync_status()\n  IO.puts(\"Loader sync status: #{result[\"syncing\"]}\")\n  # false\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/loader/status/ping": {
      "get": {
        "operationId": "LoaderAPI.ping",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.ping"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Ping",
        "tags": [
          "Loader API"
        ],
        "description": "Ping node to see if capable of syncing quickly enough (within two blocks)",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/multisignatures/accounts": {
      "get": {
        "operationId": "MultisignatureAPI.getAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "multisignatures.getAccounts",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/multisignatures.getAccounts"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.multisignatures.getAccounts"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Accounts",
        "tags": [
          "Multisignature API"
        ],
        "description": "Retrieve accounts belonging to multisignature wallet",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.multiSignatures\n  .getAccounts(\n    '05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328'\n  )\n  .then(function({ accounts }) {\n    console.log(accounts[0].address) // 6507244540548668920R\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/multisignatures/pending": {
      "get": {
        "operationId": "MultisignatureAPI.getPending",
        "parameters": [
          {
            "in": "query",
            "name": "multisignatures.pending",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/multisignatures.pending"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.multisignatures.getPending"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Pending Transactions",
        "tags": [
          "Multisignature API"
        ],
        "description": "Retrieve pending transactions on a multisignature wallet",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.multiSignatures\n  .getPending(\n    '05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328'\n  )\n  .then(function({ signed }) {\n    console.log(signed) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/multisignatures/sign": {
      "post": {
        "operationId": "MultisignatureAPI.sign",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Sign",
        "tags": [
          "Multisignature API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nSign a transaction with a multisignature wallet.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/multisignatures/": {
      "put": {
        "operationId": "MultisignatureAPI.addMultisignature",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Multisignature",
        "tags": [
          "Multisignature API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nAdd a multisignature wallet.\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/peers/": {
      "get": {
        "operationId": "PeersAPI.getPeers",
        "parameters": [
          {
            "in": "query",
            "name": "peer.getPeers",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/peer.getPeers"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.getPeers"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer List",
        "tags": [
          "Peers API"
        ],
        "description": "Retrieve a list of peers connected to the node",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .getList()\n  .then(function({ peers }) {\n    console.log(peers.length) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Peers.get(%{limit: 3})\n  IO.puts(\"Peers: #{Enum.count(result[\"peers\"])}\")\n  # 3\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/peers/get": {
      "get": {
        "operationId": "PeersAPI.getPeer",
        "parameters": [
          {
            "in": "query",
            "name": "peer.getPeer",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/peer.getPeer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.getPeer"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer",
        "tags": [
          "Peers API"
        ],
        "description": "Retrieve a peer by IP address and port",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .getByIPPort({ ip: '45.32.178.6', port: 5555 })\n  .then(function({ peer }) {\n    console.log(peer.version) // 1.0.3\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Peers.get_peer(%{ip: \"167.114.212.9\", port: \"5555\"})\n  IO.puts(\"Peer ip: #{result[\"peers\"][\"ip\"]}\")\n  # 167.114.212.9\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/peers/count": {
      "get": {
        "operationId": "PeersAPI.count",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.count"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer Count",
        "tags": [
          "Peers API"
        ],
        "description": "Get total number of peers connected, disconnected and banned",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/peers/version": {
      "get": {
        "operationId": "PeersAPI.version",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.version"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Node Version",
        "tags": [
          "Peers API"
        ],
        "description": "Get node version information",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .version()\n  .then(function({ version }) {\n    console.log(version) // 1.1.1\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Peers.get_version()\n  IO.puts(\"Peer version: #{result[\"version\"]}\")\n  # 1.3.2\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/signatures/fee": {
      "get": {
        "operationId": "SignaturesAPI.fees",
        "parameters": [
          {
            "in": "query",
            "name": "signatures.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/signatures.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.signatures.fees"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Signature Fee",
        "tags": [
          "Signatures API"
        ],
        "description": "\nGet the fee for adding a second signature at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.signatures\n  .getSecondSignatureFee()\n  .then(function({ fee }) {\n    console.log(fee) // 500000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Signatures.get_fee(%{})\n  IO.puts(\"Signature fee: #{result[\"fee\"]}\")\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/signatures/": {
      "put": {
        "operationId": "SignaturesAPI.addSignature",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Signature",
        "tags": [
          "Signatures API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nAdds a second signature to an account\n",
        "deprecated": true,
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions": {
      "get": {
        "operationId": "TransactionsAPI.getTransactions",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "\nFetch a list of transactions and the count of transactions matching the query.\nDefaults to the last 100 transactions.\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getList()\n  .then(function({ count }) {\n    console.log(count) // 563381\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client, RegisterDelegateTx\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.transactions.get_transactions(\n        and__type_cls=RegisterDelegateTx,\n        limit=1,\n        order_by='height:desc',\n    )\n    print('Newest delegate:', res.transactions[0].tx.username)\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Transactions.get(%{limit: 2, orderBy: \"height:desc\"})\n  IO.puts(Enum.count(result[\"transactions\"]))\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      },
      "post": {
        "operationId": "TransactionsAPI.localCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactions.addTransactions"
              }
            }
          },
          "description": "transactions.addTransactions",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.localCreate"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.accessDenied"
                }
              }
            },
            "description": "Secure API Access Denied"
          }
        },
        "summary": "Add Local Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "\nAdd a transaction to the node's local transaction List\n_Secure APIs must be enabled on the providing node_\n",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      },
      "put": {
        "operationId": "TransactionsAPI.put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactions.put"
              }
            }
          },
          "description": "transactions.put",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.put"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Transactions",
        "tags": [
          "Transactions API"
        ],
        "description": "Add one or multiple transactions to the transaction queue",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .put({\n    type: 0,\n    senderPublicKey: \"bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3\",\n    senderId: \"1644223775232371040R\",\n    recipientId: \"3303015780877366956R\",\n    amount: 199533766861,\n    fee: 10000000\n    ...\n  })\n  .then(function({ accepted }) {\n    console.log(accepted.length) // 1\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client, PublicKey, Address, Amount, SendTx\n\napi = Client('https://wallet.rise.vision/api/')\n\ntx = SendTx(\n    sender_public_key=PublicKey.fromhex('bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3'),\n    recipient=Address('3303015780877366956R'),\n    amount=Amount.from_unit('1995.33766861'),\n    fee=Amount.from_unit('0.1'),\n)\n# tx.signature = sk.sign(tx.to_bytes())\n\ntry:\n    res = api.transactions.add_transactions(tx)\n    print(len(res.accepted)) # 1\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result =\n    RiseElixir.Transactions.put(%{\n      senderPublicKey: \"bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3\",\n      recipientId: \"3303015780877366956R\",\n      amount: \"1995.33766861\",\n      fee: \"0.1\"\n    })\n\n  IO.puts(result[\"success\"])\n  # true\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/count": {
      "get": {
        "operationId": "TransactionsAPI.getCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getCount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction Count",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve the current number of transactions confirmed, unconfirmed, queued and multisignature",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .count()\n  .then(function({ confirmed }) {\n    console.log(confirmed) // 563381\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    counts = api.transactions.get_transaction_count()\n    print(counts.confirmed) # 563381\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Transactions.get_count()\n  IO.puts(result[\"confirmed\"])\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/get": {
      "get": {
        "operationId": "TransactionsAPI.getTX",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getTransaction",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a transaction by transaction id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getTransaction('6920969059388666996')\n  .then(function({ transaction }) {\n    console.log(transaction.type) // 0\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    tx = api.transactions.get_transaction('6920969059388666996')\n    print(tx.confirmations) # 838512\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Transactions.get_by_id(%{id: \"6920969059388666996\"})\n  IO.puts(result[\"transaction\"][\"confirmations\"])\n  # 968431\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/multisignatures": {
      "get": {
        "operationId": "TransactionsAPI.getMultiSigs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getMultiSigs"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of multisignature transactions and the count of transactions matching the query.",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/multisignatures/get": {
      "get": {
        "operationId": "TransactionsAPI.getMultiSig",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/common.scalars.id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getMultiSig"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a multisignature transaction by transaction id",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/queued": {
      "get": {
        "operationId": "TransactionsAPI.getQueuedTxs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getQueuedTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Queued Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of queued transactions and the count of transactions matching the query.",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/queued/get": {
      "get": {
        "operationId": "TransactionsAPI.getQueuedTx",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/common.scalars.id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getQueuedTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Queued Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a queued transaction by transaction id",
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/unconfirmed": {
      "get": {
        "operationId": "TransactionsAPI.getUnconfirmedTxs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getUnconfirmedTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Unconfirmed Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of unconfirmed transactions and the count of transactions matching the query.",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getUnconfirmedTransactions()\n  .then(function({ count }) {\n    console.log(count) // 3\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    res = api.transactions.get_unconfirmed_transactions()\n    print(res.count) # 3\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Transactions.get_unconfirmed(%{})\n  IO.puts(result[\"count\"])\n  # 3\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    },
    "/api/transactions/unconfirmed/get": {
      "get": {
        "operationId": "TransactionsAPI.getUnconfirmedTx",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/common.scalars.id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getUnconfirmedTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Unconfirmed Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a unconfirmed transaction by transaction id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getUnconfirmedTransaction('6920969059388666996')\n  .then(function({ transaction }) {\n    console.log(transaction.fee) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          },
          {
            "lang": "python",
            "source": "from risesdk import APIError, Client\n\napi = Client('https://wallet.rise.vision/api/')\ntry:\n    utx = api.transactions.get_unconfirmed_transaction('6920969059388666996')\n    if utx is not None:\n        print(utx.tx.fee) # 10000000\nexcept APIError as err:\n    print('API error:', err)\n"
          },
          {
            "lang": "elixir",
            "source": "import RiseElixir\n\ntry do\n  result = RiseElixir.Transactions.get_unconfirmed_by_id(%{id: \"6920969059388666996\"})\n\n  if result[\"error\"] do\n    # \"Transaction not found in this queue 6920969059388666996\"\n    IO.puts(result[\"error\"])\n  else\n    IO.puts(Enum.at(result[\"transactions\"], 0))\n  end\ncatch\n  err -> \"API error #{err}\"\nend\n"
          }
        ],
        "servers": [
          {
            "url": "https://wallet.rise.vision",
            "description": "Mainnet"
          },
          {
            "url": "http://localhost:5566",
            "description": "Local Testnet"
          }
        ]
      }
    }
  },
  "x-servers": [
    {
      "url": "https://wallet.rise.vision",
      "description": "Mainnet"
    },
    {
      "url": "http://localhost:5566",
      "description": "Local Testnet"
    }
  ]
}